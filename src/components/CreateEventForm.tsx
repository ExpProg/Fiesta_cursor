import React, { useState } from 'react';
import { useTelegram } from './TelegramProvider';
import { EventService } from '@/services/eventService';
import { useYandexMetrika } from '@/hooks/useYandexMetrika';
import { InviteUsersField } from './InviteUsersField';
import type { CreateEventData, InvitedUser } from '@/types/database';
import { Lock, Globe } from 'lucide-react';

interface CreateEventFormProps {
  onSuccess?: (eventId: string) => void;
  onCancel?: () => void;
  onFormChange?: () => void;
  className?: string;
}

export const CreateEventForm: React.FC<CreateEventFormProps> = ({
  onSuccess,
  onCancel,
  onFormChange,
  className = ''
}) => {
  const { user: telegramUser, impactOccurred } = useTelegram();
  const { reachGoal } = useYandexMetrika();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState<CreateEventData>({
    title: '',
    description: '',
    image_url: '',
    date: '',
    location: '',
    map_url: '',
    max_participants: undefined,
    is_private: false,
    invited_users: []
  });

  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState<string[]>([]);
  const [success, setSuccess] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value, type } = e.target;
    
    setFormData(prev => ({
      ...prev,
      [name]: type === 'number' ? 
        (value === '' ? undefined : Number(value)) : 
        type === 'checkbox' ? (e.target as HTMLInputElement).checked :
        value
    }));

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    onFormChange?.();

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
    if (errors.length > 0) {
      setErrors([]);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
  const handlePrivacyToggle = (isPrivate: boolean) => {
    setFormData(prev => ({
      ...prev,
      is_private: isPrivate,
      invited_users: isPrivate ? prev.invited_users : []
    }));
    onFormChange?.();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
  const handleInvitedUsersChange = (users: InvitedUser[]) => {
    setFormData(prev => ({
      ...prev,
      invited_users: users
    }));
    onFormChange?.();
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è input[type="datetime-local"]
  const formatDateForInput = (date: Date): string => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${year}-${month}-${day}T${hours}:${minutes}`;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á–∞—Å)
  const getMinDateTime = (): string => {
    const now = new Date();
    now.setHours(now.getHours() + 1);
    return formatDateForInput(now);
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = (): boolean => {
    const validation = EventService.validateEventData(formData);
    
    if (!validation.isValid) {
      setErrors(validation.errors);
      return false;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    if (formData.is_private && (!formData.invited_users || formData.invited_users.length === 0)) {
      setErrors(['–î–ª—è —á–∞—Å—Ç–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']);
      return false;
    }

    return true;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    reachGoal('create_event_form_submit_attempt');
    
    if (!telegramUser) {
      setErrors(['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω']);
      reachGoal('create_event_form_submit_failed', { error: 'not_authorized' });
      return;
    }

    if (!validateForm()) {
      impactOccurred('light');
      reachGoal('create_event_form_validation_failed', { 
        errors_count: errors.length 
      });
      return;
    }

    setIsLoading(true);
    setErrors([]);

    try {
      console.log('üöÄ Creating event with data:', formData);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç
      const eventDataWithISODate = {
        ...formData,
        date: new Date(formData.date).toISOString()
      };
      
      const response = await EventService.create(eventDataWithISODate, telegramUser.id);
      
      if (response.error || !response.data) {
        throw new Error(response.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ');
      }

      console.log('‚úÖ Event created successfully:', response.data.id);
      
      reachGoal('create_event_form_submit_success', {
        event_id: response.data.id,
        has_image: !!formData.image_url,
        has_location: !!formData.location,
        has_map_url: !!formData.map_url,
        has_max_participants: !!formData.max_participants,
        is_private: !!formData.is_private,
        invited_users_count: formData.invited_users?.length || 0
      });
      
      setSuccess(true);
      impactOccurred('medium');
      
      // –í—ã–∑—ã–≤–∞–µ–º callback —É—Å–ø–µ—Ö–∞
      if (onSuccess) {
        onSuccess(response.data.id);
      }

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        title: '',
        description: '',
        image_url: '',
        date: '',
        location: '',
        map_url: '',
        max_participants: undefined,
        is_private: false,
        invited_users: []
      });

    } catch (error) {
      console.error('‚ùå Error creating event:', error);
      
      reachGoal('create_event_form_submit_error', {
        error: error instanceof Error ? error.message : 'unknown_error'
      });
      
      setErrors([error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞']);
      impactOccurred('heavy');
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
  const handleCancel = () => {
    reachGoal('create_event_form_cancelled');
    
    setFormData({
      title: '',
      description: '',
      image_url: '',
      date: '',
      location: '',
      map_url: '',
      max_participants: undefined,
      is_private: false,
      invited_users: []
    });
    setErrors([]);
    setSuccess(false);
    
    if (onCancel) {
      onCancel();
    }
  };

  if (success) {
    return (
      <div className={`bg-white rounded-lg shadow-lg p-6 ${className}`}>
        <div className="text-center">
          <div className="text-green-500 text-6xl mb-4">üéâ</div>
          <h2 className="text-xl font-bold text-green-600 mb-2">
            –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!
          </h2>
          <p className="text-gray-600 mb-6">
            –í–∞—à–µ {formData.is_private ? '—á–∞—Å—Ç–Ω–æ–µ ' : ''}–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "{formData.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.
            {formData.is_private && formData.invited_users && formData.invited_users.length > 0 && (
              <span className="block mt-2 text-sm">
                –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {formData.invited_users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
              </span>
            )}
          </p>
          <div className="space-y-2">
            <button
              onClick={() => {
                reachGoal('create_event_success_create_another');
                setSuccess(false);
              }}
              className="w-full bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors"
            >
              –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            </button>
            <button
              onClick={() => {
                reachGoal('create_event_success_close');
                handleCancel();
              }}
              className="w-full bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-white rounded-lg shadow-lg p-6 ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ */}
      {!className.includes('border-0') && (
        <div className="mb-6">
          <h2 className="text-xl font-bold text-gray-800 mb-2">
            üéä –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          </h2>
          <p className="text-gray-600 text-sm">
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
          </p>
        </div>
      )}

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
      {errors.length > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <div className="flex items-center mb-2">
            <span className="text-red-500 text-lg mr-2">‚ö†Ô∏è</span>
            <h3 className="font-medium text-red-800">–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏:</h3>
          </div>
          <ul className="text-red-700 text-sm space-y-1">
            {errors.map((error, index) => (
              <li key={index} className="flex items-start">
                <span className="text-red-500 mr-2">‚Ä¢</span>
                {error}
              </li>
            ))}
          </ul>
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            –¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
          </label>
          <div className="grid grid-cols-2 gap-3">
            <button
              type="button"
              onClick={() => handlePrivacyToggle(false)}
              className={`p-4 rounded-lg border-2 transition-colors ${
                !formData.is_private
                  ? 'border-blue-500 bg-blue-50 text-blue-700'
                  : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
              }`}
            >
              <Globe className="w-6 h-6 mx-auto mb-2" />
              <div className="font-medium">–ü—É–±–ª–∏—á–Ω–æ–µ</div>
              <div className="text-xs mt-1">–í–∏–¥–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</div>
            </button>
            
            <button
              type="button"
              onClick={() => handlePrivacyToggle(true)}
              className={`p-4 rounded-lg border-2 transition-colors ${
                formData.is_private
                  ? 'border-purple-500 bg-purple-50 text-purple-700'
                  : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
              }`}
            >
              <Lock className="w-6 h-6 mx-auto mb-2" />
              <div className="font-medium">–ß–∞—Å—Ç–Ω–æ–µ</div>
              <div className="text-xs mt-1">–¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö</div>
            </button>
          </div>
        </div>

        {/* –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π */}
        <InviteUsersField
          invitedUsers={formData.invited_users || []}
          onInvitedUsersChange={handleInvitedUsersChange}
          isPrivate={!!formData.is_private}
        />

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
        <div>
          <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
            –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è *
          </label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title}
            onChange={handleInputChange}
            required
            maxLength={255}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–æ–≥–æ–¥–Ω—è—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ 2025"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <p className="text-xs text-gray-500 mt-1">
            –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å–∏–º—É–º 255
          </p>
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
            –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
          </label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleInputChange}
            rows={4}
            maxLength={2000}
            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏..."
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
          />
          <p className="text-xs text-gray-500 mt-1">
            –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤ ({formData.description?.length || 0}/2000)
          </p>
        </div>

        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
        <div>
          <label htmlFor="image_url" className="block text-sm font-medium text-gray-700 mb-2">
            –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          </label>
          <input
            type="url"
            id="image_url"
            name="image_url"
            value={formData.image_url}
            onChange={handleInputChange}
            placeholder="https://example.com/image.jpg"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <p className="text-xs text-gray-500 mt-1">
            –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
          </p>
          
          {/* –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          {formData.image_url && (
            <div className="mt-3">
              <img
                src={formData.image_url}
                alt="–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                className="w-full h-32 object-cover rounded-lg border"
                onError={(e) => {
                  e.currentTarget.style.display = 'none';
                }}
              />
            </div>
          )}
        </div>

        {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
        <div>
          <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-2">
            –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è *
          </label>
          <input
            type="datetime-local"
            id="date"
            name="date"
            value={formData.date}
            onChange={handleInputChange}
            min={getMinDateTime()}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <p className="text-xs text-gray-500 mt-1">
            –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
          </p>
        </div>

        {/* –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è */}
        <div>
          <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-2">
            –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
          </label>
          <input
            type="text"
            id="location"
            name="location"
            value={formData.location}
            onChange={handleInputChange}
            maxLength={500}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123, –ú–æ—Å–∫–≤–∞"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <p className="text-xs text-gray-500 mt-1">
            –ê–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
          </p>
        </div>

        {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É */}
        <div>
          <label htmlFor="map_url" className="block text-sm font-medium text-gray-700 mb-2">
            –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
          </label>
          <input
            type="url"
            id="map_url"
            name="map_url"
            value={formData.map_url}
            onChange={handleInputChange}
            placeholder="https://yandex.ru/maps/-/... –∏–ª–∏ https://maps.google.com/..."
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <p className="text-xs text-gray-500 mt-1">
            –°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã, Google Maps –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å
          </p>
        </div>

        {/* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
        <div>
          <label htmlFor="max_participants" className="block text-sm font-medium text-gray-700 mb-2">
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          </label>
          <input
            type="number"
            id="max_participants"
            name="max_participants"
            value={formData.max_participants || ''}
            onChange={handleInputChange}
            min={1}
            max={10000}
            placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <p className="text-xs text-gray-500 mt-1">
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex space-x-3 pt-4">
          <button
            type="submit"
            disabled={isLoading}
            className="flex-1 bg-blue-500 text-white py-2 px-4 rounded-lg font-medium hover:bg-blue-600 focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isLoading ? (
              <span className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                –°–æ–∑–¥–∞–Ω–∏–µ...
              </span>
            ) : (
              `–°–æ–∑–¥–∞—Ç—å ${formData.is_private ? '—á–∞—Å—Ç–Ω–æ–µ ' : ''}–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ`
            )}
          </button>
          
          <button
            type="button"
            onClick={handleCancel}
            disabled={isLoading}
            className="px-4 py-2 text-gray-600 bg-gray-100 rounded-lg font-medium hover:bg-gray-200 focus:ring-2 focus:ring-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </form>
    </div>
  );
}; 