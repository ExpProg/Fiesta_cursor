import React, { useState, useRef, useEffect } from 'react';
import { ImageService } from '@/services/imageService';
import { useYandexMetrika } from '@/hooks/useYandexMetrika';
import { useImageStorage } from '@/hooks/useImageStorage';
import { Upload, X, Image as ImageIcon, Loader2, AlertCircle } from 'lucide-react';

interface ImageUploadProps {
  currentImageUrl?: string;
  onImageUploaded: (imageUrl: string) => void;
  onImageRemoved: () => void;
  userId: number;
  className?: string;
}

export const ImageUpload: React.FC<ImageUploadProps> = ({
  currentImageUrl,
  onImageUploaded,
  onImageRemoved,
  userId,
  className = ''
}) => {
  const { reachGoal } = useYandexMetrika();
  const { isInitialized, isInitializing, error: storageError, initializationLog, isTelegramWebApp } = useImageStorage();
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const [isUploading, setIsUploading] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(currentImageUrl || null);
  const [showUrlInput, setShowUrlInput] = useState(isTelegramWebApp);
  const [urlInput, setUrlInput] = useState('');
  const [skipStorage, setSkipStorage] = useState(isTelegramWebApp);
  const [showContextMenu, setShowContextMenu] = useState(false);
  const [contextMenuPosition, setContextMenuPosition] = useState({ x: 0, y: 0 });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  const displayError = uploadError || storageError;
  const isDisabled = isUploading || (isInitializing && !skipStorage);
  
  // –ï—Å–ª–∏ Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–æ–ª–µ–µ 3 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
  const [showFallback, setShowFallback] = useState(isTelegramWebApp);
  
  useEffect(() => {
    if (isInitializing && !skipStorage) {
      const timer = setTimeout(() => {
        setShowFallback(true);
      }, 3000); // –°–æ–∫—Ä–∞—Ç–∏–ª–∏ –¥–æ 3 —Å–µ–∫—É–Ω–¥
      
      return () => clearTimeout(timer);
    } else {
      setShowFallback(isTelegramWebApp);
    }
  }, [isInitializing, skipStorage, isTelegramWebApp]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = () => setShowContextMenu(false);
    if (showContextMenu) {
      document.addEventListener('click', handleClickOutside);
      return () => document.removeEventListener('click', handleClickOutside);
    }
  }, [showContextMenu]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const handleContextMenu = (event: React.MouseEvent) => {
    if (!previewUrl) return;
    
    event.preventDefault();
    setContextMenuPosition({ x: event.clientX, y: event.clientY });
    setShowContextMenu(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const isReplacing = !!previewUrl;
    const previousImageUrl = previewUrl;

    reachGoal('image_upload_attempt', {
      file_size: file.size,
      file_type: file.type,
      user_id: userId,
      action: isReplacing ? 'replace' : 'add'
    });

    setIsUploading(true);
    setUploadError(null);

    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
      const objectUrl = URL.createObjectURL(file);
      setPreviewUrl(objectUrl);

      // –í Telegram WebApp –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (isInitialized && !isTelegramWebApp) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
        const result = await ImageService.uploadImage(file, userId);

        if (result.error || !result.data) {
          throw new Error(result.error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        }

        // –ï—Å–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑ Storage
        if (isReplacing && previousImageUrl && previousImageUrl.startsWith('http') && !previousImageUrl.startsWith('blob:')) {
          ImageService.deleteImage(previousImageUrl).catch(console.warn);
        }

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
        URL.revokeObjectURL(objectUrl);
        setPreviewUrl(result.data);
        onImageUploaded(result.data);
        
        reachGoal('image_upload_success', {
          image_url: result.data,
          user_id: userId,
          action: isReplacing ? 'replace' : 'add'
        });
      } else {
        // –í Telegram WebApp –∏–ª–∏ –∫–æ–≥–¥–∞ Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        const reader = new FileReader();
        reader.onload = () => {
          const base64 = reader.result as string;
          URL.revokeObjectURL(objectUrl);
          setPreviewUrl(base64);
          onImageUploaded(base64);
          
          reachGoal('image_upload_success', {
            image_url: 'base64_image',
            user_id: userId,
            action: isReplacing ? 'replace' : 'add'
          });
        };
        reader.onerror = () => {
          throw new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
        };
        reader.readAsDataURL(file);
        setIsUploading(false);
        return;
      }

    } catch (error) {
      console.error('‚ùå Error uploading image:', error);
      setUploadError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setPreviewUrl(isReplacing ? previousImageUrl : null);

      reachGoal('image_upload_error', {
        error: error instanceof Error ? error.message : 'unknown_error',
        user_id: userId,
        action: isReplacing ? 'replace' : 'add'
      });
    } finally {
      setIsUploading(false);
      // –û—á–∏—â–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleRemoveImage = async () => {
    if (!previewUrl) return;

    reachGoal('image_remove_attempt', {
      image_url: previewUrl,
      user_id: userId
    });

    try {
      // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL), —É–¥–∞–ª—è–µ–º –∏–∑ Storage
      if (previewUrl.startsWith('http') && !previewUrl.startsWith('blob:')) {
        await ImageService.deleteImage(previewUrl);
      }

      setPreviewUrl(null);
      onImageRemoved();

      reachGoal('image_remove_success', {
        user_id: userId
      });

    } catch (error) {
      console.error('‚ùå Error removing image:', error);
      // –î–∞–∂–µ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Storage –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ UI
      setPreviewUrl(null);
      onImageRemoved();

      reachGoal('image_remove_error', {
        error: error instanceof Error ? error.message : 'unknown_error',
        user_id: userId
      });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ URL
  const handleUrlSubmit = () => {
    if (!urlInput.trim()) return;
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
    try {
      new URL(urlInput);
      
      // –ï—Å–ª–∏ –±—ã–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ Storage
      if (previewUrl && previewUrl.startsWith('http') && !previewUrl.startsWith('blob:') && isInitialized && !isTelegramWebApp) {
        ImageService.deleteImage(previewUrl).catch(console.warn);
      }
      
      setPreviewUrl(urlInput);
      onImageUploaded(urlInput);
      setUrlInput('');
      setShowUrlInput(false);
      setUploadError(null);
      
      reachGoal('image_url_added_manual', {
        image_url: urlInput,
        user_id: userId,
        action: previewUrl ? 'replace' : 'add'
      });
    } catch {
      setUploadError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
  };

  return (
    <div className={`space-y-3 ${className}`}>
      <label className="block text-sm font-medium text-gray-700">
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      </label>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Telegram WebApp */}
      {isTelegramWebApp && (
        <div className="mb-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-center gap-2">
            <span className="text-blue-600">üì±</span>
            <span className="text-sm font-medium text-blue-700">Telegram WebApp</span>
          </div>
          <p className="text-xs text-blue-600 mt-1">
            –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ base64.
          </p>
        </div>
      )}

      {/* –û–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏/–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
      <div className="relative">
        {previewUrl ? (
          // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          <div className="relative group">
            <img
              src={previewUrl}
              alt="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
              className="w-full h-48 object-cover rounded-lg border-2 border-gray-200 cursor-pointer"
              onContextMenu={handleContextMenu}
              onClick={() => setShowContextMenu(false)}
            />
            
            {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é */}
            {showContextMenu && (
              <div
                className="fixed bg-white border border-gray-200 rounded-lg shadow-lg py-1 z-50 min-w-[150px]"
                style={{
                  left: Math.min(contextMenuPosition.x, window.innerWidth - 160),
                  top: Math.min(contextMenuPosition.y, window.innerHeight - 120)
                }}
                onClick={(e) => e.stopPropagation()}
              >
                <button
                  onClick={() => {
                    handleUploadClick();
                    setShowContextMenu(false);
                  }}
                  className="w-full text-left px-3 py-2 hover:bg-gray-100 flex items-center gap-2 text-sm"
                >
                  <Upload className="w-4 h-4" />
                  {isTelegramWebApp ? '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ'}
                </button>
                {!isTelegramWebApp && (
                  <button
                    onClick={() => {
                      setShowUrlInput(true);
                      setShowContextMenu(false);
                    }}
                    className="w-full text-left px-3 py-2 hover:bg-gray-100 flex items-center gap-2 text-sm"
                  >
                    <ImageIcon className="w-4 h-4" />
                    –ò–∑–º–µ–Ω–∏—Ç—å URL
                  </button>
                )}
                <hr className="my-1" />
                <button
                  onClick={() => {
                    handleRemoveImage();
                    setShowContextMenu(false);
                  }}
                  className="w-full text-left px-3 py-2 hover:bg-red-50 text-red-600 flex items-center gap-2 text-sm"
                >
                  <X className="w-4 h-4" />
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            )}

            {/* –û–≤–µ—Ä–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
            <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-200 rounded-lg flex items-center justify-center">
              <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex gap-2">
                <button
                  type="button"
                  onClick={handleUploadClick}
                  disabled={isDisabled}
                  className="bg-white text-gray-700 px-3 py-2 rounded-lg shadow-md hover:bg-gray-50 transition-colors duration-200 flex items-center gap-2"
                >
                  <Upload className="w-4 h-4" />
                  –ó–∞–º–µ–Ω–∏—Ç—å
                </button>
                {!isTelegramWebApp && (
                  <button
                    type="button"
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowUrlInput(true);
                    }}
                    className="bg-blue-500 text-white px-3 py-2 rounded-lg shadow-md hover:bg-blue-600 transition-colors duration-200 flex items-center gap-2"
                  >
                    <ImageIcon className="w-4 h-4" />
                    URL
                  </button>
                )}
                <button
                  type="button"
                  onClick={handleRemoveImage}
                  disabled={isDisabled}
                  className="bg-red-500 text-white px-3 py-2 rounded-lg shadow-md hover:bg-red-600 transition-colors duration-200 flex items-center gap-2"
                >
                  <X className="w-4 h-4" />
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>

            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º */}
            <div className="mt-3 flex gap-2 justify-center">
              <button
                type="button"
                onClick={handleUploadClick}
                disabled={isDisabled}
                className="flex items-center gap-2 px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors duration-200 disabled:opacity-50"
              >
                <Upload className="w-4 h-4" />
                {isTelegramWebApp ? '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ'}
              </button>
              {!isTelegramWebApp && (
                <button
                  type="button"
                  onClick={() => setShowUrlInput(true)}
                  className="flex items-center gap-2 px-3 py-1.5 text-sm bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg transition-colors duration-200"
                >
                  <ImageIcon className="w-4 h-4" />
                  –ò–∑–º–µ–Ω–∏—Ç—å URL
                </button>
              )}
              <button
                type="button"
                onClick={handleRemoveImage}
                disabled={isDisabled}
                className="flex items-center gap-2 px-3 py-1.5 text-sm bg-red-100 hover:bg-red-200 text-red-700 rounded-lg transition-colors duration-200 disabled:opacity-50"
              >
                <X className="w-4 h-4" />
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
            
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –ø—Ä–∞–≤–æ–º –∫–ª–∏–∫–µ */}
            <p className="text-xs text-gray-400 text-center mt-2">
              üí° –ù–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º
            </p>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {isUploading && (
              <div className="absolute inset-0 bg-black bg-opacity-50 rounded-lg flex items-center justify-center">
                <div className="bg-white px-4 py-2 rounded-lg flex items-center gap-2">
                  <Loader2 className="w-4 h-4 animate-spin" />
                  <span className="text-sm">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </div>
              </div>
            )}
          </div>
        ) : (
          // –û–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
          <button
            type="button"
            onClick={handleUploadClick}
            disabled={isDisabled}
            className="w-full h-48 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 transition-colors duration-200 flex flex-col items-center justify-center gap-3 bg-gray-50 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {(isUploading || (isInitializing && !skipStorage && !isTelegramWebApp)) ? (
              <>
                <Loader2 className="w-8 h-8 text-gray-400 animate-spin" />
                <span className="text-sm text-gray-500">
                  {isInitializing ? '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...' : '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'}
                </span>
                {showFallback && !isTelegramWebApp && (
                  <button
                    type="button"
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowUrlInput(true);
                    }}
                    className="mt-2 text-xs text-blue-600 hover:text-blue-800 underline"
                  >
                    –î–æ–±–∞–≤–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                  </button>
                )}
              </>
            ) : isTelegramWebApp ? (
              <>
                <ImageIcon className="w-8 h-8 text-blue-400" />
                <div className="text-center">
                  <span className="text-sm font-medium text-blue-700">
                    üì± –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                  </span>
                  <p className="text-xs text-blue-500 mt-1">
                    JPEG, PNG, WebP –¥–æ 5MB
                  </p>
                  <p className="text-xs text-blue-400 mt-1">
                    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ base64
                  </p>
                </div>
              </>
            ) : storageError || skipStorage ? (
              <>
                <AlertCircle className="w-8 h-8 text-orange-400" />
                <div className="text-center">
                  <span className="text-sm font-medium text-orange-600">
                    {skipStorage ? '–†–µ–∂–∏–º –±–µ–∑ Storage' : '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'}
                  </span>
                  <p className="text-xs text-orange-500 mt-1">
                    {skipStorage ? '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' : storageError}
                  </p>
                  <button
                    type="button"
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowUrlInput(true);
                    }}
                    className="mt-2 text-xs text-blue-600 hover:text-blue-800 underline"
                  >
                    {showUrlInput ? '–°–∫—Ä—ã—Ç—å –ø–æ–ª–µ URL' : '–î–æ–±–∞–≤–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
                  </button>
                </div>
              </>
            ) : (
              <>
                <ImageIcon className="w-8 h-8 text-gray-400" />
                <div className="text-center">
                  <span className="text-sm font-medium text-gray-700">
                    –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                  </span>
                  <p className="text-xs text-gray-500 mt-1">
                    JPEG, PNG, WebP –¥–æ 5MB
                  </p>
                  <button
                    type="button"
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowUrlInput(true);
                    }}
                    className="mt-2 text-xs text-blue-600 hover:text-blue-800 underline"
                  >
                    –ò–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                  </button>
                </div>
              </>
            )}
          </button>
        )}

        {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è —Ñ–∞–π–ª–æ–≤ */}
        <input
          ref={fileInputRef}
          type="file"
          accept="image/jpeg,image/jpg,image/png,image/webp"
          onChange={handleFileSelect}
          className="hidden"
        />
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {displayError && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-3">
          <p className="text-sm text-red-600">{displayError}</p>
        </div>
      )}

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <p className="text-xs text-gray-500">
        {isTelegramWebApp 
          ? '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1200x600 –ø–∏–∫—Å–µ–ª–µ–π. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã JPEG, PNG, WebP —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 5MB. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ base64.'
          : '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1200x600 –ø–∏–∫—Å–µ–ª–µ–π. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã JPEG, PNG, WebP —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 5MB.'
        }
      </p>
      
      {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) */}
      {import.meta.env.DEV && (
        <details className="mt-2" open={!!storageError || isInitializing || isTelegramWebApp}>
          <summary className="text-xs text-gray-400 cursor-pointer hover:text-gray-600">
            üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
          </summary>
          <div className="mt-2 p-2 bg-gray-50 rounded text-xs space-y-1">
            <div>UserId: {userId}</div>
            <div>Telegram WebApp: {isTelegramWebApp ? '‚úÖ' : '‚ùå'}</div>
            <div>Initialized: {isInitialized ? '‚úÖ' : '‚ùå'}</div>
            <div>Initializing: {isInitializing ? '‚è≥' : '‚ùå'}</div>
            <div>Storage Error: {storageError || 'None'}</div>
            <div>Upload Error: {uploadError || 'None'}</div>
            <div>Show Fallback: {showFallback ? '‚úÖ' : '‚ùå'}</div>
            <div>Skip Storage: {skipStorage ? '‚úÖ' : '‚ùå'}</div>
            
            {/* –õ–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ */}
            {initializationLog.length > 0 && (
              <div className="mt-2 p-2 bg-white border rounded max-h-32 overflow-y-auto">
                <div className="font-semibold text-gray-700 mb-1">–õ–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:</div>
                {initializationLog.map((logEntry, index) => (
                  <div key={index} className="text-xs text-gray-600">
                    {logEntry}
                  </div>
                ))}
              </div>
            )}
            
            <div className="flex gap-1 mt-2">
              <button
                type="button"
                onClick={() => {
                  console.log('üîß Manual Storage Check');
                  window.location.reload();
                }}
                className="px-2 py-1 bg-blue-500 text-white rounded text-xs"
              >
                –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
              </button>
              <button
                type="button"
                onClick={async () => {
                  console.log('üîç Testing Supabase connection...');
                  try {
                    const { ImageService } = await import('@/services/imageService');
                    
                    console.log('üîç Environment variables check...');
                    const envCheck = ImageService.checkEnvironmentVariables();
                    
                    console.log('üîç Connection test...');
                    const connectionTest = await ImageService.checkConnection();
                    
                    console.log('üîç Bucket test...');
                    const bucketTest = await ImageService.checkBucketExists();
                    
                    const results = {
                      env: envCheck,
                      connection: connectionTest,
                      bucket: bucketTest
                    };
                    
                    console.log('Test results:', results);
                    
                    const message = [
                      `Environment: ${envCheck.isValid ? '‚úÖ' : '‚ùå'}`,
                      `Missing vars: ${envCheck.missing.length > 0 ? envCheck.missing.join(', ') : 'None'}`,
                      `Connection: ${connectionTest.isConnected ? '‚úÖ' : '‚ùå'}`,
                      `Bucket exists: ${bucketTest ? '‚úÖ' : '‚ùå'}`,
                      `Error: ${connectionTest.error || 'None'}`
                    ].join('\n');
                    
                    alert(message);
                  } catch (error) {
                    console.error('Test failed:', error);
                    alert(`Test failed: ${error}`);
                  }
                }}
                className="px-2 py-1 bg-green-500 text-white rounded text-xs"
              >
                –¢–µ—Å—Ç
              </button>
              {isInitializing && (
                <button
                  type="button"
                  onClick={() => {
                    console.log('üõë Force stopping initialization...');
                    window.location.reload();
                  }}
                  className="px-2 py-1 bg-red-500 text-white rounded text-xs"
                >
                  –°—Ç–æ–ø
                </button>
              )}
              {isInitializing && (
                <button
                  type="button"
                  onClick={() => {
                    console.log('‚è≠Ô∏è Skipping Storage initialization...');
                    setSkipStorage(true);
                  }}
                  className="px-2 py-1 bg-yellow-500 text-white rounded text-xs"
                >
                  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                </button>
              )}
            </div>
          </div>
        </details>
      )}

      {/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL */}
      {showUrlInput && (
        <div className="mt-3 p-4 border border-blue-200 rounded-lg bg-blue-50">
          <label className="block text-sm font-medium text-blue-700 mb-2">
            {previewUrl ? '–ò–∑–º–µ–Ω–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' : 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
          </label>
          <div className="flex gap-2">
            <input
              type="url"
              value={urlInput}
              onChange={(e) => setUrlInput(e.target.value)}
              placeholder="https://example.com/image.jpg"
              className="flex-1 px-3 py-2 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  handleUrlSubmit();
                }
              }}
            />
            <button
              type="button"
              onClick={handleUrlSubmit}
              disabled={!urlInput.trim()}
              className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
            >
              {previewUrl ? '–ó–∞–º–µ–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
            </button>
            <button
              type="button"
              onClick={() => {
                setShowUrlInput(false);
                setUrlInput('');
                setUploadError(null);
              }}
              className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 text-sm"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
          
          {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä URL */}
          {urlInput && (
            <div className="mt-3">
              <p className="text-xs text-blue-600 mb-2">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</p>
              <div className="relative">
                <img
                  src={urlInput}
                  alt="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä URL"
                  className="w-full h-32 object-cover rounded border"
                  onLoad={() => setUploadError(null)}
                  onError={() => setUploadError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL')}
                />
              </div>
            </div>
          )}
          
          {previewUrl && (
            <p className="text-xs text-blue-500 mt-2">
              üí° –¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–æ–≤—ã–º
            </p>
          )}
        </div>
      )}
    </div>
  );
}; 