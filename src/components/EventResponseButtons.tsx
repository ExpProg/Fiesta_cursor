/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
 */

import React, { useState, useEffect } from 'react';
import { Check, X, Clock } from 'lucide-react';
import { 
  getUserResponseStatus, 
  respondToEvent, 
  canUserRespond,
  getResponseButtonClass,
  getResponseStatusText,
  checkEventResponsesTable
} from '@/utils/eventResponses';
import type { ResponseStatus, DatabaseEvent } from '@/types/database';

interface EventResponseButtonsProps {
  event: DatabaseEvent;
  currentUserId?: number; // telegram_id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userFirstName?: string;
  userLastName?: string | null;
  userUsername?: string | null;
  onResponseChange?: (newResponse: ResponseStatus | null) => void;
  className?: string;
}

export const EventResponseButtons: React.FC<EventResponseButtonsProps> = ({
  event,
  currentUserId,
  userFirstName,
  userLastName,
  userUsername,
  onResponseChange,
  className = ''
}) => {
  const [userResponse, setUserResponse] = useState<ResponseStatus | null>(null);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState<ResponseStatus | null>(null);
  const [tableError, setTableError] = useState<string | null>(null);
  const [showChangeOptions, setShowChangeOptions] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  const isCreator = currentUserId === event.created_by;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (currentUserId) {
      checkTableAndLoadResponse();
    }
  }, [currentUserId, event.id]);

  const checkTableAndLoadResponse = async () => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    const tableCheck = await checkEventResponsesTable();
    if (!tableCheck.exists || !tableCheck.canInsert) {
      setTableError(tableCheck.error || '–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return;
    }
    
    setTableError(null);
    loadUserResponse();
  };

  const loadUserResponse = async () => {
    if (!currentUserId) return;
    
    setLoading(true);
    try {
      const status = await getUserResponseStatus(event.id, currentUserId);
      setUserResponse(status);
    } catch (error) {
      console.error('Failed to load user response:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleResponse = async (responseStatus: ResponseStatus) => {
    if (!currentUserId || !userFirstName || submitting) return;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, —Å–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä
    const newStatus = userResponse === responseStatus ? null : responseStatus;

    setSubmitting(responseStatus);
    
    try {
      if (newStatus === null) {
        // –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª–∏–∫ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
        console.log('Remove response - not implemented yet');
        return;
      }

      const result = await respondToEvent(
        event.id,
        currentUserId,
        userFirstName,
        userLastName || null,
        userUsername || null,
        newStatus
      );

      if (result.success) {
        setUserResponse(newStatus);
        setShowChangeOptions(false);
        onResponseChange?.(newStatus);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (typeof window !== 'undefined' && 'Telegram' in window) {
          const telegram = (window as any).Telegram?.WebApp;
          if (telegram?.HapticFeedback) {
            telegram.HapticFeedback.impactOccurred('light');
          }
        }
      } else {
        console.error('Failed to respond to event:', result.error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      }
    } catch (error) {
      console.error('Error responding to event:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞.');
    } finally {
      setSubmitting(null);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
  const canRespond = canUserRespond(
    event.status,
    event.current_participants,
    event.max_participants,
    userResponse
  );

  // –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ç–æ–∂–µ –º–æ–∂–µ—Ç –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Å–≤–æ—ë –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ

  // –ï—Å–ª–∏ –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  if (!currentUserId) {
    return (
      <div className={`${className}`}>
        <div className="bg-gray-50 rounded-lg p-4 text-center">
          <p className="text-gray-600 text-sm">
            –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram, —á—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className={`${className}`}>
      {/* –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–ª–∏–∫–æ–≤ */}
      {tableError && (
        <div className="mb-3 p-3 bg-red-50 rounded-lg">
          <div className="text-red-700 text-sm">
            <div className="font-medium">–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div>
            <div className="text-xs mt-1">{tableError}</div>
          </div>
        </div>
      )}

      {/* –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ—Ç–∫–ª–∏–∫ –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
      {userResponse && !tableError && !showChangeOptions && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className="w-3 h-3 bg-green-500 rounded-full mr-3"></div>
              <div>
                <div className="font-medium text-green-800">
                  {userResponse === 'attending' ? '–í—ã –∏–¥—ë—Ç–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!' : 
                   userResponse === 'not_attending' ? '–í—ã –Ω–µ –∏–¥—ë—Ç–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' : 
                   '–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–π–¥—ë—Ç–µ'}
                </div>
                <div className="text-sm text-green-600">
                  –í–∞—à –æ—Ç–∫–ª–∏–∫: {getResponseStatusText(userResponse)}
                </div>
              </div>
            </div>
            <button
              onClick={() => setShowChangeOptions(true)}
              className="text-sm text-green-700 hover:text-green-800 underline"
            >
              –ò–∑–º–µ–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–∞ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
      {(!userResponse || showChangeOptions) && !tableError && (
        <div className="space-y-3">
          {showChangeOptions && (
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-medium text-gray-900">–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫:</h3>
              <button
                onClick={() => setShowChangeOptions(false)}
                className="text-sm text-gray-500 hover:text-gray-700"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          )}
          
          {!showChangeOptions && (
            <div className="flex items-center justify-between">
              <h3 className="font-medium text-gray-900">–ò–¥—ë—Ç–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?</h3>
              {isCreator && (
                <span className="text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded-full">
                  üëë –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
                </span>
              )}
            </div>
          )}
          
          <div className="grid grid-cols-2 gap-3">
            {/* –ö–Ω–æ–ø–∫–∞ "–ë—É–¥—É" */}
            <button
              onClick={() => {
                handleResponse('attending');
                setShowChangeOptions(false);
              }}
              disabled={!canRespond || submitting !== null || loading}
              className={getResponseButtonClass('attending', userResponse, !canRespond || loading)}
            >
              {submitting === 'attending' ? (
                <div className="flex items-center justify-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2"></div>
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </div>
              ) : (
                <div className="flex items-center justify-center">
                  <Check className="w-4 h-4 mr-2" />
                  –ë—É–¥—É
                </div>
              )}
            </button>

            {/* –ö–Ω–æ–ø–∫–∞ "–ù–µ –±—É–¥—É" */}
            <button
              onClick={() => {
                handleResponse('not_attending');
                setShowChangeOptions(false);
              }}
              disabled={submitting !== null || loading}
              className={getResponseButtonClass('not_attending', userResponse, loading)}
            >
              {submitting === 'not_attending' ? (
                <div className="flex items-center justify-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2"></div>
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </div>
              ) : (
                <div className="flex items-center justify-center">
                  <X className="w-4 h-4 mr-2" />
                  –ù–µ –±—É–¥—É
                </div>
              )}
            </button>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          {!canRespond && (
            <div className="text-sm text-gray-500 text-center mt-2">
              {event.status !== 'active' 
                ? '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ' 
                : '–í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã'
              }
            </div>
          )}

          {loading && (
            <div className="flex items-center justify-center py-2">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
              <span className="text-gray-600 text-sm">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
          )}
        </div>
      )}
    </div>
  );
}; 