import React, { useState } from 'react';
import { EventService } from '@/services/eventService';
import { useYandexMetrika } from '@/hooks/useYandexMetrika';
import { useTelegram } from './TelegramProvider';
import { ImageUpload } from './ImageUpload';
import type { DatabaseEvent, CreateEventData } from '@/types/database';
import { Calendar, MapPin, FileText, Users, X } from 'lucide-react';

interface EditEventFormProps {
  event: DatabaseEvent;
  onSuccess: (eventId: string) => void;
  onCancel: () => void;
  onFormChange?: (formData: any) => void;
  className?: string;
}

export const EditEventForm: React.FC<EditEventFormProps> = ({ 
  event, 
  onSuccess, 
  onCancel,
  onFormChange,
  className = ''
}) => {
  const { reachGoal } = useYandexMetrika();
  const { user: telegramUser } = useTelegram();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  const [formData, setFormData] = useState<CreateEventData>({
    title: event.title,
    description: event.description || '',
    image_url: event.image_url || '',
    date: new Date(event.date).toISOString().slice(0, 16), // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç datetime-local
    location: event.location || '',
    map_url: event.map_url || '',
    max_participants: event.max_participants || undefined,
    host_id: event.host_id || undefined
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    const newFormData = {
      ...formData,
      [name]: value
    };
    setFormData(newFormData);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    onFormChange?.(newFormData);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    
    reachGoal('edit_event_form_submit_attempt', {
      event_id: event.id,
      event_title: event.title.substring(0, 30)
    });

    try {
      console.log('üìù Updating event:', event.id, formData);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const validation = EventService.validateEventData(formData);
      if (!validation.isValid) {
        setError(validation.errors.join('\n'));
        
        reachGoal('edit_event_form_validation_failed', {
          event_id: event.id,
          errors_count: validation.errors.length
        });
        
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—è event_time (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ create)
      const eventDate = new Date(formData.date);
      const hours = eventDate.getHours().toString().padStart(2, '0');
      const minutes = eventDate.getMinutes().toString().padStart(2, '0');
      const seconds = eventDate.getSeconds().toString().padStart(2, '0');
      const eventTime = `${hours}:${minutes}:${seconds}`; // —Ñ–æ—Ä–º–∞—Ç HH:MM:SS –¥–ª—è TIME –ø–æ–ª—è

      const result = await EventService.update(event.id, {
        title: formData.title,
        description: formData.description || null,
        image_url: formData.image_url || null,
        date: formData.date,
        event_time: eventTime, // –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        location: formData.location || null,
        map_url: formData.map_url || null,
        max_participants: formData.max_participants || null,
        host_id: formData.host_id || null,
        updated_at: new Date().toISOString()
      });

      if (result.error) {
        setError(result.error.message);
        
        reachGoal('edit_event_form_submit_error', {
          event_id: event.id,
          error: result.error.message
        });
        
        return;
      }

      console.log('‚úÖ Event updated successfully:', result.data?.id);
      
      reachGoal('edit_event_form_submit_success', {
        event_id: event.id,
        changes_made: {
          title_changed: formData.title !== event.title,
          description_changed: formData.description !== (event.description || ''),
          image_changed: formData.image_url !== (event.image_url || ''),
          location_changed: formData.location !== (event.location || ''),
          map_url_changed: formData.map_url !== (event.map_url || ''),
          max_participants_changed: formData.max_participants !== event.max_participants
        }
      });
      
      onSuccess(event.id);
    } catch (err) {
      console.error('‚ùå Error updating event:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      
      reachGoal('edit_event_form_submit_error', {
        event_id: event.id,
        error: err instanceof Error ? err.message : 'unknown_error'
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={`p-6 ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ */}
      {!className.includes('border-0') && (
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-gray-900">
            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          </h2>
          <button
            onClick={onCancel}
            className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
      )}

      {/* –§–æ—Ä–º–∞ */}
      <form onSubmit={handleSubmit} className="space-y-4">
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <FileText className="w-4 h-4 mr-2" />
            –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è *
          </label>
          <input
            type="text"
            name="title"
            value={formData.title}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–µ—á–µ—Ä–∏–Ω–∫–∞ –Ω–∞ –∫—Ä—ã—à–µ"
            required
          />
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <FileText className="w-4 h-4 mr-2" />
            –û–ø–∏—Å–∞–Ω–∏–µ
          </label>
          <textarea
            name="description"
            value={formData.description}
            onChange={handleInputChange}
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏..."
          />
        </div>

        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <FileText className="w-4 h-4 mr-2" />
            –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          </label>
          <ImageUpload
            currentImageUrl={formData.image_url}
            onImageUploaded={(url: string) => {
              const newFormData = { ...formData, image_url: url };
              setFormData(newFormData);
              onFormChange?.(newFormData);
            }}
            onImageRemoved={() => {
              const newFormData = { ...formData, image_url: '' };
              setFormData(newFormData);
              onFormChange?.(newFormData);
            }}
            userId={telegramUser?.id || 0}
          />
        </div>

        {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <Calendar className="w-4 h-4 mr-2" />
            –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è *
          </label>
          <input
            type="datetime-local"
            name="date"
            value={formData.date}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            required
          />
        </div>

        {/* –ú–µ—Å—Ç–æ */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <MapPin className="w-4 h-4 mr-2" />
            –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
          </label>
          <input
            type="text"
            name="location"
            value={formData.location}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 1"
          />
        </div>

        {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <MapPin className="w-4 h-4 mr-2" />
            –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
          </label>
          <input
            type="url"
            name="map_url"
            value={formData.map_url}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="https://yandex.ru/maps/-/... –∏–ª–∏ https://maps.google.com/..."
          />
          <p className="text-xs text-gray-500 mt-1">
            –°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã, Google Maps –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å
          </p>
        </div>

        {/* –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
        <div>
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <Users className="w-4 h-4 mr-2" />
            –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          </label>
          <input
            type="number"
            name="max_participants"
            value={formData.max_participants || ''}
            onChange={handleInputChange}
            min="1"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="10"
          />
          <p className="text-xs text-gray-500 mt-1">
            –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          </p>
        </div>

        {/* –û—à–∏–±–∫–∞ */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="text-red-600 text-sm whitespace-pre-line">{error}</div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex space-x-3 pt-4">
          <button
            type="button"
            onClick={() => {
              reachGoal('edit_event_form_cancelled', {
                event_id: event.id
              });
              onCancel();
            }}
            className="flex-1 px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg font-medium transition-colors"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="submit"
            disabled={loading}
            className="flex-1 px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-medium transition-colors disabled:opacity-50"
          >
            {loading ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </button>
        </div>
      </form>
    </div>
  );
}; 