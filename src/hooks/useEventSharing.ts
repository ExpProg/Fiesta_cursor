import { useEffect, useState } from 'react';
import { getEventIdFromUrl, getEventIdFromTelegramStart, clearEventParam } from '@/utils/sharing';
import { EventService } from '@/services/eventService';
import type { DatabaseEvent } from '@/types/database';

interface UseEventSharingReturn {
  sharedEvent: DatabaseEvent | null;
  isLoadingSharedEvent: boolean;
  sharedEventError: string | null;
  clearSharedEvent: () => void;
}

/**
 * –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ URL –∏–ª–∏ Telegram start parameter
 */
export function useEventSharing(): UseEventSharingReturn {
  const [sharedEvent, setSharedEvent] = useState<DatabaseEvent | null>(null);
  const [isLoadingSharedEvent, setIsLoadingSharedEvent] = useState(false);
  const [sharedEventError, setSharedEventError] = useState<string | null>(null);

  useEffect(() => {
    const handleSharedEvent = async () => {
      // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ Telegram start parameter
      const eventIdFromUrl = getEventIdFromUrl();
      const eventIdFromTelegram = getEventIdFromTelegramStart();
      const eventId = eventIdFromUrl || eventIdFromTelegram;

      if (!eventId) {
        return;
      }

      console.log('üîó Found shared event ID:', eventId);

      setIsLoadingSharedEvent(true);
      setSharedEventError(null);

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        const response = await EventService.getById(eventId);
        
        if (response.error || !response.data) {
          throw new Error(response.error?.message || '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        console.log('‚úÖ Shared event loaded:', response.data);
        setSharedEvent(response.data);

        // –û—á–∏—â–∞–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –º–µ—à–∞–ª –¥–∞–ª—å–Ω–µ–π—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (eventIdFromUrl) {
          clearEventParam();
        }

      } catch (error) {
        console.error('‚ùå Failed to load shared event:', error);
        setSharedEventError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è');
      } finally {
        setIsLoadingSharedEvent(false);
      }
    };

    handleSharedEvent();
  }, []); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  const clearSharedEvent = () => {
    setSharedEvent(null);
    setSharedEventError(null);
  };

  return {
    sharedEvent,
    isLoadingSharedEvent,
    sharedEventError,
    clearSharedEvent
  };
} 