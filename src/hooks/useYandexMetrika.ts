import { useCallback, useEffect } from 'react';

// –¢–∏–ø—ã –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏ –∏ Telegram WebApp
declare global {
  interface Window {
    ym: (
      counterId: number,
      method: string,
      ...params: any[]
    ) => void;
    Telegram?: {
      WebApp?: {
        platform: string;
        version: string;
        viewportHeight: number;
        initDataUnsafe?: {
          user?: {
            id: number;
          };
        };
      };
    };
  }
}

const METRIKA_COUNTER_ID = 102291721;

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–æ–π
 */
export const useYandexMetrika = () => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏
  const isAvailable = useCallback((): boolean => {
    const available = typeof window !== 'undefined' && typeof window.ym === 'function';
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ development –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ Telegram
    if (import.meta.env.MODE === 'development' || typeof window !== 'undefined' && 'Telegram' in window) {
      console.log('üîç YM availability check:', {
        available,
        hasWindow: typeof window !== 'undefined',
        hasYM: typeof window?.ym === 'function',
        isTelegram: typeof window !== 'undefined' && 'Telegram' in window,
        userAgent: typeof window !== 'undefined' ? navigator.userAgent : 'N/A'
      });
    }
    
    return available;
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const checkMetrika = () => {
      const available = isAvailable();
      const isTelegram = typeof window !== 'undefined' && 'Telegram' in window;
      
      console.log('üìä Yandex Metrika initialization check:', {
        available,
        isTelegram,
        counterId: METRIKA_COUNTER_ID,
        timestamp: new Date().toISOString()
      });

      if (available && isTelegram) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Telegram
        try {
          window.ym(METRIKA_COUNTER_ID, 'reachGoal', 'telegram_webapp_init', {
            platform: window.Telegram?.WebApp?.platform || 'unknown',
            version: window.Telegram?.WebApp?.version || 'unknown'
          });
          console.log('üìä Telegram WebApp init event sent');
        } catch (error) {
          console.error('‚ùå Failed to send Telegram init event:', error);
        }
      }
    };

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å–∫—Ä–∏–ø—Ç–æ–≤
    const timer = setTimeout(checkMetrika, 2000);
    return () => clearTimeout(timer);
  }, [isAvailable]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–ª–∏ (goal)
  const reachGoal = useCallback((target: string, params?: Record<string, any>) => {
    const available = isAvailable();
    const isTelegram = typeof window !== 'undefined' && 'Telegram' in window;
    
    if (!available) {
      console.log('üîç YM Goal (unavailable):', target, params, {
        isTelegram,
        hasYM: typeof window?.ym === 'function'
      });
      return;
    }

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
      const enrichedParams = params ? { ...params } : {};
      if (isTelegram && window.Telegram?.WebApp) {
        enrichedParams.telegram_platform = window.Telegram.WebApp.platform;
        enrichedParams.telegram_version = window.Telegram.WebApp.version;
      }

      if (Object.keys(enrichedParams).length > 0) {
        window.ym(METRIKA_COUNTER_ID, 'reachGoal', target, enrichedParams);
      } else {
        window.ym(METRIKA_COUNTER_ID, 'reachGoal', target);
      }
      
      console.log('üìä YM Goal sent:', target, enrichedParams);
    } catch (error) {
      console.error('‚ùå YM Goal error:', error, { target, params });
    }
  }, [isAvailable]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
  const hit = useCallback((url?: string, options?: Record<string, any>) => {
    const available = isAvailable();
    
    if (!available) {
      console.log('üîç YM Hit (unavailable):', url, options);
      return;
    }

    try {
      const targetUrl = url || window.location.href;
      const enrichedOptions = options ? { ...options } : {};
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
      if (typeof window !== 'undefined' && 'Telegram' in window && window.Telegram?.WebApp) {
        enrichedOptions.telegram_referrer = 'telegram_webapp';
      }

      if (Object.keys(enrichedOptions).length > 0) {
        window.ym(METRIKA_COUNTER_ID, 'hit', targetUrl, enrichedOptions);
      } else {
        window.ym(METRIKA_COUNTER_ID, 'hit', targetUrl);
      }
      
      console.log('üìä YM Hit sent:', targetUrl, enrichedOptions);
    } catch (error) {
      console.error('‚ùå YM Hit error:', error, { url, options });
    }
  }, [isAvailable]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const userParams = useCallback((params: Record<string, any>) => {
    const available = isAvailable();
    
    if (!available) {
      console.log('üîç YM UserParams (unavailable):', params);
      return;
    }

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
      const enrichedParams = { ...params };
      if (typeof window !== 'undefined' && 'Telegram' in window && window.Telegram?.WebApp) {
        enrichedParams.is_telegram_webapp = true;
        enrichedParams.telegram_platform = window.Telegram.WebApp.platform;
        enrichedParams.telegram_version = window.Telegram.WebApp.version;
        enrichedParams.telegram_viewport_height = window.Telegram.WebApp.viewportHeight;
      }

      window.ym(METRIKA_COUNTER_ID, 'userParams', enrichedParams);
      console.log('üìä YM UserParams sent:', enrichedParams);
    } catch (error) {
      console.error('‚ùå YM UserParams error:', error, { params });
    }
  }, [isAvailable]);

  return {
    isAvailable: isAvailable(),
    reachGoal,
    hit,
    userParams
  };
}; 