import { useEffect, useState } from 'react';
import { ImageService } from '@/services/imageService';

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase Storage –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export const useImageStorage = () => {
  const [isInitialized, setIsInitialized] = useState(false);
  const [isInitializing, setIsInitializing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [initializationLog, setInitializationLog] = useState<string[]>([]);

  useEffect(() => {
    const initializeStorage = async () => {
      if (isInitialized || isInitializing) return;

      setIsInitializing(true);
      setError(null);
      setInitializationLog(['üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Storage...']);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const timeoutId = setTimeout(() => {
        console.warn('‚è∞ Storage initialization timeout');
        setError('–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        setInitializationLog(prev => [...prev, '‚è∞ –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (10 —Å–µ–∫)']);
        setIsInitializing(false);
      }, 10000); // 10 —Å–µ–∫—É–Ω–¥

      try {
        setInitializationLog(prev => [...prev, 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...']);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const envCheck = ImageService.checkEnvironmentVariables();
        if (!envCheck.isValid) {
          throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envCheck.missing.join(', ')}`);
        }
        
        setInitializationLog(prev => [...prev, '‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ']);
        setInitializationLog(prev => [...prev, 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...']);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
        const connectionCheck = await ImageService.checkConnection();
        if (!connectionCheck.isConnected) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: ${connectionCheck.error}`);
        }
        
        setInitializationLog(prev => [...prev, '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ']);
        setInitializationLog(prev => [...prev, 'ü™£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ bucket...']);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ bucket
        const bucketExists = await ImageService.checkBucketExists();
        
        if (!bucketExists) {
          setInitializationLog(prev => [...prev, 'ü™£ Bucket –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...']);
          
          // –°–æ–∑–¥–∞–µ–º bucket –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          const createResult = await ImageService.createBucket();
          
          if (createResult.error) {
            throw new Error(createResult.error.message);
          }
          
          setInitializationLog(prev => [...prev, '‚úÖ Bucket —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ']);
        } else {
          setInitializationLog(prev => [...prev, '‚úÖ Bucket —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç']);
        }

        clearTimeout(timeoutId);
        setInitializationLog(prev => [...prev, 'üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!']);
        setIsInitialized(true);
      } catch (err) {
        console.error('‚ùå Error initializing storage:', err);
        clearTimeout(timeoutId);
        
        // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        let errorMessage = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞';
        
        if (err instanceof Error) {
          if (err.message.includes('JWT')) {
            errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
          } else if (err.message.includes('network') || err.message.includes('fetch')) {
            errorMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
          } else if (err.message.includes('–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')) {
            errorMessage = err.message;
          } else {
            errorMessage = err.message;
          }
        }
        
        setError(errorMessage);
        setInitializationLog(prev => [...prev, `‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`]);
      } finally {
        setIsInitializing(false);
      }
    };

    initializeStorage();
  }, [isInitialized, isInitializing]);

  return {
    isInitialized,
    isInitializing,
    error,
    initializationLog
  };
}; 