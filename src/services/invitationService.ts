import { supabase } from '@/hooks/useSupabase';
import type { EventInvitation, InvitedUser } from '@/types/database';

export class InvitationService {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  static async createInvitations(
    eventId: string,
    invitedBy: number,
    invitedUsers: InvitedUser[]
  ) {
    try {
      console.log('üìß Creating invitations for event:', eventId, 'Users:', invitedUsers.length);

      const invitations = invitedUsers.map(user => ({
        event_id: eventId,
        invited_by_telegram_id: invitedBy,
        invited_telegram_id: user.telegram_id,
        invited_first_name: user.first_name,
        invited_last_name: user.last_name || null,
        invited_username: user.username || null,
        status: 'pending' as const
      }));

      const { data, error } = await supabase
        .from('event_invitations')
        .insert(invitations)
        .select();

      if (error) {
        console.error('‚ùå Error creating invitations:', error);
        
        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (error.code === '42P01' || error.message.includes('does not exist')) {
          console.warn('‚ö†Ô∏è Table event_invitations does not exist yet. Please run the migration.');
          return { 
            data: null, 
            error: { 
              message: '–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.' 
            } 
          };
        }
        
        return { data: null, error };
      }

      console.log('‚úÖ Invitations created successfully:', data?.length);
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Exception creating invitations:', error);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–∞–±–ª–∏—Ü—ã
      if (error instanceof Error && error.message.includes('does not exist')) {
        return { 
          data: null, 
          error: { 
            message: '–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.' 
          } 
        };
      }
      
      return { 
        data: null, 
        error: { message: error instanceof Error ? error.message : 'Unknown error' }
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  static async getEventInvitations(eventId: string) {
    try {
      const { data, error } = await supabase
        .from('event_invitations')
        .select('*')
        .eq('event_id', eventId)
        .order('created_at', { ascending: true });

      if (error) {
        console.error('‚ùå Error fetching invitations:', error);
        return { data: null, error };
      }

      return { data: data as EventInvitation[], error: null };
    } catch (error) {
      console.error('‚ùå Exception fetching invitations:', error);
      return { 
        data: null, 
        error: { message: error instanceof Error ? error.message : 'Unknown error' }
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserInvitations(telegramId: number, status?: 'pending' | 'accepted' | 'declined') {
    try {
      let query = supabase
        .from('event_invitations')
        .select(`
          *,
          events (
            id,
            title,
            description,
            date,
            event_time,
            location,
            image_url,
            gradient_background,
            created_by,
            max_participants,
            current_participants
          )
        `)
        .eq('invited_telegram_id', telegramId);

      if (status) {
        query = query.eq('status', status);
      }

      const { data, error } = await query
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error fetching user invitations:', error);
        
        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        if (error.code === '42P01' || error.message.includes('does not exist')) {
          console.warn('‚ö†Ô∏è Table event_invitations does not exist yet. Please run the migration.');
          return { 
            data: [], 
            error: { 
              message: '–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.' 
            } 
          };
        }
        
        return { data: null, error };
      }

      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Exception fetching user invitations:', error);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–∞–±–ª–∏—Ü—ã
      if (error instanceof Error && error.message.includes('does not exist')) {
        return { 
          data: [], 
          error: { 
            message: '–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.' 
          } 
        };
      }
      
      return { 
        data: null, 
        error: { message: error instanceof Error ? error.message : 'Unknown error' }
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
   */
  static async updateInvitationStatus(
    invitationId: string, 
    status: 'accepted' | 'declined'
  ) {
    try {
      console.log('üìß Updating invitation status:', invitationId, status);

      const { data, error } = await supabase
        .from('event_invitations')
        .update({ 
          status,
          updated_at: new Date().toISOString()
        })
        .eq('id', invitationId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error updating invitation status:', error);
        return { data: null, error };
      }

      console.log('‚úÖ Invitation status updated successfully');
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Exception updating invitation status:', error);
      return { 
        data: null, 
        error: { message: error instanceof Error ? error.message : 'Unknown error' }
      };
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
   */
  static async deleteInvitation(invitationId: string) {
    try {
      console.log('üóëÔ∏è Deleting invitation:', invitationId);

      const { error } = await supabase
        .from('event_invitations')
        .delete()
        .eq('id', invitationId);

      if (error) {
        console.error('‚ùå Error deleting invitation:', error);
        return { error };
      }

      console.log('‚úÖ Invitation deleted successfully');
      return { error: null };
    } catch (error) {
      console.error('‚ùå Exception deleting invitation:', error);
      return { 
        error: { message: error instanceof Error ? error.message : 'Unknown error' }
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  static async checkUserInvitation(eventId: string, telegramId: number) {
    try {
      const { data, error } = await supabase
        .from('event_invitations')
        .select('status')
        .eq('event_id', eventId)
        .eq('invited_telegram_id', telegramId)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        console.error('‚ùå Error checking invitation:', error);
        return { data: null, error };
      }

      return { data: data?.status || null, error: null };
    } catch (error) {
      console.error('‚ùå Exception checking invitation:', error);
      return { 
        data: null, 
        error: { message: error instanceof Error ? error.message : 'Unknown error' }
      };
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
   */
  static async addInvitation(
    eventId: string,
    invitedBy: number,
    invitedUser: InvitedUser
  ) {
    try {
      console.log('üìß Adding invitation for event:', eventId, 'User:', invitedUser.telegram_id);

      const invitation = {
        event_id: eventId,
        invited_by_telegram_id: invitedBy,
        invited_telegram_id: invitedUser.telegram_id,
        invited_first_name: invitedUser.first_name,
        invited_last_name: invitedUser.last_name || null,
        invited_username: invitedUser.username || null,
        status: 'pending' as const
      };

      const { data, error } = await supabase
        .from('event_invitations')
        .insert([invitation])
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error adding invitation:', error);
        return { data: null, error };
      }

      console.log('‚úÖ Invitation added successfully');
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Exception adding invitation:', error);
      return { 
        data: null, 
        error: { message: error instanceof Error ? error.message : 'Unknown error' }
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  static async canUserViewEvent(eventId: string, telegramId: number) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—É–±–ª–∏—á–Ω—ã–º
      const { data: event, error: eventError } = await supabase
        .from('events')
        .select('is_private, created_by')
        .eq('id', eventId)
        .single();

      if (eventError) {
        return { canView: false, reason: 'event_not_found' };
      }

      // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—É–±–ª–∏—á–Ω–æ–µ, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
      if (!event.is_private) {
        return { canView: true, reason: 'public_event' };
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      if (event.created_by === telegramId) {
        return { canView: true, reason: 'event_creator' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      const { data: invitationStatus } = await this.checkUserInvitation(eventId, telegramId);
      
      if (invitationStatus) {
        return { canView: true, reason: 'invited' };
      }

      return { canView: false, reason: 'not_invited' };
    } catch (error) {
      console.error('‚ùå Exception checking user access:', error);
      return { canView: false, reason: 'error' };
    }
  }
} 