import { supabase } from '@/hooks/useSupabase';
import type { ApiResponse } from '@/types/database';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ Supabase Storage
 */
export class ImageService {
  private static readonly BUCKET_NAME = 'event-images';
  private static readonly MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
  private static readonly ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
  private static readonly UPLOAD_TIMEOUT = 30000; // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  private static readonly COMPRESSION_QUALITY = 0.8; // –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
  private static readonly MAX_DIMENSION = 1920; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  static checkEnvironmentVariables(): { isValid: boolean; missing: string[] } {
    const required = ['VITE_SUPABASE_URL', 'VITE_SUPABASE_ANON_KEY'];
    const missing: string[] = [];
    
    for (const variable of required) {
      if (!import.meta.env[variable]) {
        missing.push(variable);
      }
    }
    
    console.log('üîç Environment variables check:', {
      VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL ? '‚úÖ Set' : '‚ùå Missing',
      VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? '‚úÖ Set' : '‚ùå Missing',
      VITE_TELEGRAM_BOT_USERNAME: import.meta.env.VITE_TELEGRAM_BOT_USERNAME ? '‚úÖ Set' : '‚ö†Ô∏è Optional',
      missing
    });
    
    return {
      isValid: missing.length === 0,
      missing
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
   */
  private static validateFile(file: File): { isValid: boolean; error?: string } {
    if (!this.ALLOWED_TYPES.includes(file.type)) {
      return {
        isValid: false,
        error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤: JPEG, PNG, WebP'
      };
    }

    if (file.size > this.MAX_FILE_SIZE) {
      return {
        isValid: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB'
      };
    }

    return { isValid: true };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
   */
  private static generateFileName(file: File, userId: number): string {
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 15);
    const extension = file.name.split('.').pop() || 'jpg';
    return `${userId}/${timestamp}_${randomString}.${extension}`;
  }

  /**
   * –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Canvas
   */
  private static async compressImage(file: File): Promise<File> {
    return new Promise((resolve, reject) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      if (!ctx) {
        reject(new Error('Canvas context not available'));
        return;
      }

      img.onload = () => {
        try {
          // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
          let { width, height } = img;
          
          if (width > this.MAX_DIMENSION || height > this.MAX_DIMENSION) {
            if (width > height) {
              height = (height * this.MAX_DIMENSION) / width;
              width = this.MAX_DIMENSION;
            } else {
              width = (width * this.MAX_DIMENSION) / height;
              height = this.MAX_DIMENSION;
            }
          }

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
          canvas.width = width;
          canvas.height = height;

          // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas
          ctx.drawImage(img, 0, 0, width, height);

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas –≤ blob
          canvas.toBlob(
            (blob) => {
              if (!blob) {
                reject(new Error('Failed to compress image'));
                return;
              }

              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π File –æ–±—ä–µ–∫—Ç
              const compressedFile = new File([blob], file.name, {
                type: file.type,
                lastModified: Date.now()
              });

              console.log('üóúÔ∏è Image compressed:', {
                originalSize: (file.size / 1024).toFixed(1) + 'KB',
                compressedSize: (compressedFile.size / 1024).toFixed(1) + 'KB',
                originalDimensions: `${img.naturalWidth}x${img.naturalHeight}`,
                newDimensions: `${width}x${height}`,
                compressionRatio: ((1 - compressedFile.size / file.size) * 100).toFixed(1) + '%'
              });

              resolve(compressedFile);
            },
            file.type,
            this.COMPRESSION_QUALITY
          );
        } catch (error) {
          reject(error);
        }
      };

      img.onerror = () => {
        reject(new Error('Failed to load image for compression'));
      };

      img.src = URL.createObjectURL(file);
    });
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
   */
  private static async uploadWithTimeout(file: File, fileName: string): Promise<any> {
    return Promise.race([
      supabase.storage
        .from(this.BUCKET_NAME)
        .upload(fileName, file, {
          cacheControl: '3600',
          upsert: false
        }),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')), this.UPLOAD_TIMEOUT)
      )
    ]);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Supabase Storage
   */
  static async uploadImage(file: File, userId: number): Promise<ApiResponse<string>> {
    const startTime = performance.now();
    
    try {
      console.log('üì§ ImageService.uploadImage uploading file:', file.name, `(${(file.size / 1024).toFixed(1)}KB)`);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
      const validation = this.validateFile(file);
      if (!validation.isValid) {
        return {
          data: null,
          error: { message: validation.error! }
        };
      }

      // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      let processedFile = file;
      try {
        if (file.size > 500 * 1024) { // –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 500KB
          console.log('üóúÔ∏è Compressing large image...');
          processedFile = await this.compressImage(file);
        }
      } catch (compressionError) {
        console.warn('‚ö†Ô∏è Image compression failed, using original file:', compressionError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const fileName = this.generateFileName(processedFile, userId);
      console.log('üìù Generated file name:', fileName);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Storage —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const { data, error } = await this.uploadWithTimeout(processedFile, fileName);

      if (error) {
        console.error('‚ùå Supabase storage error:', error);
        throw error;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: urlData } = supabase.storage
        .from(this.BUCKET_NAME)
        .getPublicUrl(fileName);

      if (!urlData?.publicUrl) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }

      const uploadTime = performance.now() - startTime;
      console.log('‚úÖ Image uploaded successfully:', {
        url: urlData.publicUrl,
        uploadTime: `${uploadTime.toFixed(0)}ms`,
        finalSize: `${(processedFile.size / 1024).toFixed(1)}KB`
      });

      return {
        data: urlData.publicUrl,
        error: null
      };

    } catch (error) {
      const uploadTime = performance.now() - startTime;
      console.error('‚ùå Error uploading image:', {
        error: error instanceof Error ? error.message : 'unknown_error',
        uploadTime: `${uploadTime.toFixed(0)}ms`,
        fileSize: `${(file.size / 1024).toFixed(1)}KB`
      });

      return {
        data: null,
        error: { 
          message: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        }
      };
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Storage
   */
  static async deleteImage(imageUrl: string): Promise<ApiResponse<null>> {
    try {
      console.log('üóëÔ∏è ImageService.deleteImage deleting image:', imageUrl);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
      const url = new URL(imageUrl);
      const pathParts = url.pathname.split('/');
      const fileName = pathParts[pathParts.length - 1];
      const userFolder = pathParts[pathParts.length - 2];
      const filePath = `${userFolder}/${fileName}`;

      console.log('üìù Extracted file path:', filePath);

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage
      const { error } = await supabase.storage
        .from(this.BUCKET_NAME)
        .remove([filePath]);

      if (error) {
        console.error('‚ùå Supabase storage delete error:', error);
        throw error;
      }

      console.log('‚úÖ Image deleted successfully');
      return {
        data: null,
        error: null
      };

    } catch (error) {
      console.error('‚ùå Error deleting image:', error);
      return {
        data: null,
        error: { 
          message: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        }
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
   */
  static async checkConnection(): Promise<{ isConnected: boolean; error?: string }> {
    try {
      console.log('üîç Checking Supabase connection...');
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const { data, error } = await supabase
        .from('users')
        .select('count')
        .limit(1);
      
      if (error) {
        console.error('‚ùå Supabase connection error:', error);
        return {
          isConnected: false,
          error: error.message
        };
      }
      
      console.log('‚úÖ Supabase connection successful');
      return { isConnected: true };
      
    } catch (error) {
      console.error('‚ùå Supabase connection failed:', error);
      return {
        isConnected: false,
        error: error instanceof Error ? error.message : 'Connection failed'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è bucket (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
   */
  static async checkBucketExists(): Promise<boolean> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const connectionCheck = await this.checkConnection();
      if (!connectionCheck.isConnected) {
        console.error('‚ùå Cannot check bucket: no connection to Supabase');
        return false;
      }
      
      const { data, error } = await supabase.storage.listBuckets();
      
      if (error) {
        console.error('‚ùå Error checking buckets:', error);
        return false;
      }

      const bucketExists = data?.some(bucket => bucket.name === this.BUCKET_NAME);
      console.log(`ü™£ Bucket '${this.BUCKET_NAME}' exists:`, bucketExists);
      
      return bucketExists || false;
    } catch (error) {
      console.error('‚ùå Error checking bucket existence:', error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ bucket (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
   */
  static async createBucket(): Promise<ApiResponse<null>> {
    try {
      console.log(`ü™£ Creating bucket '${this.BUCKET_NAME}'`);

      const { error } = await supabase.storage.createBucket(this.BUCKET_NAME, {
        public: true,
        allowedMimeTypes: this.ALLOWED_TYPES,
        fileSizeLimit: this.MAX_FILE_SIZE
      });

      if (error) {
        console.error('‚ùå Error creating bucket:', error);
        throw error;
      }

      console.log('‚úÖ Bucket created successfully');
      return {
        data: null,
        error: null
      };

    } catch (error) {
      console.error('‚ùå Error creating bucket:', error);
      return {
        data: null,
        error: { 
          message: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å bucket'
        }
      };
    }
  }
}

export const imageService = ImageService; 