import { supabase } from '@/hooks/useSupabase';
import type { ApiResponse } from '@/types/database';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ Supabase Storage
 */
export class ImageService {
  private static readonly BUCKET_NAME = 'event-images';
  private static readonly MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
  private static readonly ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
   */
  private static validateFile(file: File): { isValid: boolean; error?: string } {
    if (!this.ALLOWED_TYPES.includes(file.type)) {
      return {
        isValid: false,
        error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤: JPEG, PNG, WebP'
      };
    }

    if (file.size > this.MAX_FILE_SIZE) {
      return {
        isValid: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB'
      };
    }

    return { isValid: true };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
   */
  private static generateFileName(file: File, userId: number): string {
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 15);
    const extension = file.name.split('.').pop() || 'jpg';
    return `${userId}/${timestamp}_${randomString}.${extension}`;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Supabase Storage
   */
  static async uploadImage(file: File, userId: number): Promise<ApiResponse<string>> {
    try {
      console.log('üì§ ImageService.uploadImage uploading file:', file.name);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
      const validation = this.validateFile(file);
      if (!validation.isValid) {
        return {
          data: null,
          error: { message: validation.error! }
        };
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const fileName = this.generateFileName(file, userId);
      console.log('üìù Generated file name:', fileName);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Storage
      const { data, error } = await supabase.storage
        .from(this.BUCKET_NAME)
        .upload(fileName, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (error) {
        console.error('‚ùå Supabase storage error:', error);
        throw error;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: urlData } = supabase.storage
        .from(this.BUCKET_NAME)
        .getPublicUrl(fileName);

      if (!urlData?.publicUrl) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }

      console.log('‚úÖ Image uploaded successfully:', urlData.publicUrl);
      return {
        data: urlData.publicUrl,
        error: null
      };

    } catch (error) {
      console.error('‚ùå Error uploading image:', error);
      return {
        data: null,
        error: { 
          message: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        }
      };
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Storage
   */
  static async deleteImage(imageUrl: string): Promise<ApiResponse<null>> {
    try {
      console.log('üóëÔ∏è ImageService.deleteImage deleting image:', imageUrl);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
      const url = new URL(imageUrl);
      const pathParts = url.pathname.split('/');
      const fileName = pathParts[pathParts.length - 1];
      const userFolder = pathParts[pathParts.length - 2];
      const filePath = `${userFolder}/${fileName}`;

      console.log('üìù Extracted file path:', filePath);

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage
      const { error } = await supabase.storage
        .from(this.BUCKET_NAME)
        .remove([filePath]);

      if (error) {
        console.error('‚ùå Supabase storage delete error:', error);
        throw error;
      }

      console.log('‚úÖ Image deleted successfully');
      return {
        data: null,
        error: null
      };

    } catch (error) {
      console.error('‚ùå Error deleting image:', error);
      return {
        data: null,
        error: { 
          message: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        }
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
   */
  static async checkConnection(): Promise<{ isConnected: boolean; error?: string }> {
    try {
      console.log('üîç Checking Supabase connection...');
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const { data, error } = await supabase
        .from('users')
        .select('count')
        .limit(1);
      
      if (error) {
        console.error('‚ùå Supabase connection error:', error);
        return {
          isConnected: false,
          error: error.message
        };
      }
      
      console.log('‚úÖ Supabase connection successful');
      return { isConnected: true };
      
    } catch (error) {
      console.error('‚ùå Supabase connection failed:', error);
      return {
        isConnected: false,
        error: error instanceof Error ? error.message : 'Connection failed'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è bucket (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
   */
  static async checkBucketExists(): Promise<boolean> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const connectionCheck = await this.checkConnection();
      if (!connectionCheck.isConnected) {
        console.error('‚ùå Cannot check bucket: no connection to Supabase');
        return false;
      }
      
      const { data, error } = await supabase.storage.listBuckets();
      
      if (error) {
        console.error('‚ùå Error checking buckets:', error);
        return false;
      }

      const bucketExists = data?.some(bucket => bucket.name === this.BUCKET_NAME);
      console.log(`ü™£ Bucket '${this.BUCKET_NAME}' exists:`, bucketExists);
      
      return bucketExists || false;
    } catch (error) {
      console.error('‚ùå Error checking bucket existence:', error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ bucket (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
   */
  static async createBucket(): Promise<ApiResponse<null>> {
    try {
      console.log(`ü™£ Creating bucket '${this.BUCKET_NAME}'`);

      const { error } = await supabase.storage.createBucket(this.BUCKET_NAME, {
        public: true,
        allowedMimeTypes: this.ALLOWED_TYPES,
        fileSizeLimit: this.MAX_FILE_SIZE
      });

      if (error) {
        console.error('‚ùå Error creating bucket:', error);
        throw error;
      }

      console.log('‚úÖ Bucket created successfully');
      return {
        data: null,
        error: null
      };

    } catch (error) {
      console.error('‚ùå Error creating bucket:', error);
      return {
        data: null,
        error: { 
          message: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å bucket'
        }
      };
    }
  }
}

export const imageService = ImageService; 