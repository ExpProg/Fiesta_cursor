import { supabase } from '@/hooks/useSupabase';
import type { 
  DatabaseUser, 
  DatabaseUserInsert, 
  DatabaseUserUpdate,
  ApiResponse,
  User 
} from '@/types/database';
import type { TelegramWebAppUser } from '@/types/telegram';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
export class UserService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
   */
  static async getByTelegramId(telegramId: number): Promise<ApiResponse<DatabaseUser>> {
    try {
      console.log(`üîç UserService.getByTelegramId searching for ID: ${telegramId}`);
      
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', telegramId)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        console.error('‚ùå Supabase error in getByTelegramId:', error);
        throw error;
      }

      if (error && error.code === 'PGRST116') {
        console.log(`‚ÑπÔ∏è No user found with telegram_id: ${telegramId}`);
      } else if (data) {
        console.log(`‚úÖ Found user with telegram_id: ${telegramId}, user_id: ${data.id}`);
      }

      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Error fetching user by Telegram ID:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ Supabase
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      
      if (error && typeof error === 'object') {
        if ('message' in error && typeof error.message === 'string') {
          errorMessage = error.message;
        } else if ('error' in error && typeof error.error === 'string') {
          errorMessage = error.error;
        } else if ('details' in error && typeof error.details === 'string') {
          errorMessage = error.details;
        } else {
          errorMessage = JSON.stringify(error);
        }
      } else if (typeof error === 'string') {
        errorMessage = error;
      }
      
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${errorMessage}` } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  static async getById(id: string): Promise<ApiResponse<DatabaseUser>> {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', id)
        .single();

      if (error) {
        throw error;
      }

      return { data, error: null };
    } catch (error) {
      console.error('Error fetching user by ID:', error);
      return { 
        data: null, 
        error: { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' } 
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async create(userData: DatabaseUserInsert): Promise<ApiResponse<DatabaseUser>> {
    try {
      console.log('üìù UserService.create attempting to create user:', userData);
      
      const { data, error } = await supabase
        .from('users')
        .insert(userData)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Supabase error in create:', error);
        throw error;
      }

      console.log('‚úÖ User created successfully in database:', data?.id);
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Error creating user:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ Supabase
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      
      if (error && typeof error === 'object') {
        if ('message' in error && typeof error.message === 'string') {
          errorMessage = error.message;
        } else if ('error' in error && typeof error.error === 'string') {
          errorMessage = error.error;
        } else if ('details' in error && typeof error.details === 'string') {
          errorMessage = error.details;
        } else {
          errorMessage = JSON.stringify(error);
        }
      } else if (typeof error === 'string') {
        errorMessage = error;
      }
      
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${errorMessage}` } 
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async update(id: string, updates: DatabaseUserUpdate): Promise<ApiResponse<DatabaseUser>> {
    try {
      const { data, error } = await supabase
        .from('users')
        .update(updates)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        throw error;
      }

      return { data, error: null };
    } catch (error) {
      console.error('Error updating user:', error);
      return { 
        data: null, 
        error: { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' } 
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
   */
  static async updateByTelegramId(
    telegramId: number, 
    updates: DatabaseUserUpdate
  ): Promise<ApiResponse<DatabaseUser>> {
    try {
      console.log('üîÑ UserService.updateByTelegramId updating user:', { telegramId, updates });
      
      const { data, error } = await supabase
        .from('users')
        .update(updates)
        .eq('telegram_id', telegramId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Supabase error in updateByTelegramId:', error);
        throw error;
      }

      if (!data) {
        console.error('‚ùå No data returned from updateByTelegramId');
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω');
      }

      console.log('‚úÖ User updated successfully:', data.id);
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Error updating user by Telegram ID:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ Supabase
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      
      if (error && typeof error === 'object') {
        if ('message' in error && typeof error.message === 'string') {
          errorMessage = error.message;
        } else if ('error' in error && typeof error.error === 'string') {
          errorMessage = error.error;
        } else if ('details' in error && typeof error.details === 'string') {
          errorMessage = error.details;
        } else if ('hint' in error && typeof error.hint === 'string') {
          const errorObj = error as any;
          errorMessage = `${errorObj.message || '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'} (${error.hint})`;
        } else {
          errorMessage = JSON.stringify(error);
        }
      } else if (typeof error === 'string') {
        errorMessage = error;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ RLS
      if (errorMessage.includes('row-level security') || errorMessage.includes('RLS') || errorMessage.includes('policy')) {
        errorMessage = `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: ${errorMessage}. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`;
      }
      
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${errorMessage}` } 
      };
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async delete(id: string): Promise<ApiResponse<null>> {
    try {
      const { error } = await supabase
        .from('users')
        .delete()
        .eq('id', id);

      if (error) {
        throw error;
      }

      return { data: null, error: null };
    } catch (error) {
      console.error('Error deleting user:', error);
      return { 
        data: null, 
        error: { message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Telegram
   */
  static async getOrCreateUser(telegramUser: TelegramWebAppUser): Promise<DatabaseUser> {
    try {
      console.log('üîÑ UserService.getOrCreateUser started with:', {
        telegram_id: telegramUser.id,
        first_name: telegramUser.first_name,
        username: telegramUser.username,
        language_code: telegramUser.language_code,
        is_premium: telegramUser.is_premium
      });

      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üîç Searching for existing user...');
      const existingUserResponse = await this.getByTelegramId(telegramUser.id);
      
      if (existingUserResponse.error && existingUserResponse.error.message) {
        console.error('‚ùå Error searching for existing user:', existingUserResponse.error);
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${existingUserResponse.error.message}`);
      }
      
      if (existingUserResponse.data) {
        console.log('‚úÖ Found existing user:', existingUserResponse.data.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        const updates: DatabaseUserUpdate = {};
        let needsUpdate = false;

        if (existingUserResponse.data.first_name !== telegramUser.first_name) {
          updates.first_name = telegramUser.first_name;
          needsUpdate = true;
        }

        if (existingUserResponse.data.last_name !== telegramUser.last_name) {
          updates.last_name = telegramUser.last_name;
          needsUpdate = true;
        }

        if (existingUserResponse.data.username !== telegramUser.username) {
          updates.username = telegramUser.username;
          needsUpdate = true;
        }

        if (existingUserResponse.data.language_code !== telegramUser.language_code) {
          updates.language_code = telegramUser.language_code;
          needsUpdate = true;
        }

        if (existingUserResponse.data.is_premium !== telegramUser.is_premium) {
          updates.is_premium = telegramUser.is_premium || false;
          needsUpdate = true;
        }

        if (needsUpdate) {
          console.log('üîÑ Updating user data:', updates);
          const updateResponse = await this.updateByTelegramId(telegramUser.id, updates);
          if (updateResponse.error) {
            console.error('‚ùå Error updating user:', updateResponse.error);
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${updateResponse.error.message}`);
          }
          if (updateResponse.data) {
            console.log('‚úÖ User updated successfully');
            return updateResponse.data;
          }
        }

        console.log('‚úÖ Returning existing user without updates');
        return existingUserResponse.data;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üîÑ Creating new user...');
      const newUser: DatabaseUserInsert = {
        telegram_id: telegramUser.id,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name || null,
        username: telegramUser.username || null,
        language_code: telegramUser.language_code || 'en',
        is_premium: telegramUser.is_premium || false,
      };

      console.log('üìù New user data:', newUser);
      const createResponse = await this.create(newUser);
      
      if (createResponse.error || !createResponse.data) {
        console.error('‚ùå Error creating user:', createResponse.error);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${createResponse.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }

      console.log('‚úÖ User created successfully:', createResponse.data.id);
      return createResponse.data;

    } catch (error) {
      console.error('‚ùå Error in getOrCreateUser:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
      if (error instanceof Error) {
        throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      } else {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${String(error)}`);
      }
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ username
   */
  static async search(query: string, limit: number = 20): Promise<ApiResponse<DatabaseUser[]>> {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .or(`first_name.ilike.%${query}%,last_name.ilike.%${query}%,username.ilike.%${query}%`)
        .limit(limit);

      if (error) {
        throw error;
      }

      return { data: data || [], error: null };
    } catch (error) {
      console.error('Error searching users:', error);
      return { 
        data: null, 
        error: { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  static async getUsers(
    page: number = 1, 
    limit: number = 20
  ): Promise<ApiResponse<DatabaseUser[]> & { count: number }> {
    try {
      const offset = (page - 1) * limit;
      
      const { data, error, count } = await supabase
        .from('users')
        .select('*', { count: 'exact' })
        .range(offset, offset + limit - 1)
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      return { data: data || [], error: null, count: count || 0 };
    } catch (error) {
      console.error('Error fetching users:', error);
      return { 
        data: null, 
        error: { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
        count: 0
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  static async getPremiumUsers(): Promise<ApiResponse<DatabaseUser[]>> {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('is_premium', true)
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      return { data: data || [], error: null };
    } catch (error) {
      console.error('Error fetching premium users:', error);
      return { 
        data: null, 
        error: { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  static async getVerifiedUsers(): Promise<ApiResponse<DatabaseUser[]>> {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('is_verified', true)
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      return { data: data || [], error: null };
    } catch (error) {
      console.error('Error fetching verified users:', error);
      return { 
        data: null, 
        error: { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' } 
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async updateAvatar(userId: string, avatarUrl: string): Promise<ApiResponse<DatabaseUser>> {
    return this.update(userId, { avatar_url: avatarUrl });
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async updateProfile(
    userId: string, 
    profile: {
      first_name?: string;
      last_name?: string;
      bio?: string;
      phone?: string;
      email?: string;
    }
  ): Promise<ApiResponse<DatabaseUser>> {
    return this.update(userId, profile);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserStats(telegramId: number): Promise<ApiResponse<any>> {
    try {
      const { data, error } = await supabase.rpc('get_user_stats', {
        user_telegram_id: telegramId
      });

      if (error) {
        throw error;
      }

      return { data: data?.[0] || null, error: null };
    } catch (error) {
      console.error('Error fetching user stats:', error);
      return { 
        data: null, 
        error: { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' } 
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async exists(telegramId: number): Promise<boolean> {
    try {
      const { data } = await supabase
        .from('users')
        .select('id')
        .eq('telegram_id', telegramId)
        .single();

      return !!data;
    } catch {
      return false;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å DatabaseUser –≤ User (—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞—Ç)
   */
  static convertToUser(dbUser: DatabaseUser): User {
    return {
      ...dbUser,
      created_at: new Date(dbUser.created_at),
      updated_at: new Date(dbUser.updated_at),
    };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ DatabaseUser –≤ User[]
   */
  static convertToUsers(dbUsers: DatabaseUser[]): User[] {
    return dbUsers.map(this.convertToUser);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const userService = UserService; 