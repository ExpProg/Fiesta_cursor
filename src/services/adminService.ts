import { supabase } from '@/hooks/useSupabase';
import type { ApiResponse, DatabaseUser } from '@/types/database';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */
export class AdminService {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   */
  static async isUserAdmin(telegramId: number): Promise<ApiResponse<boolean>> {
    try {
      console.log(`üîç AdminService.isUserAdmin checking admin status for user: ${telegramId}`);
      
      const { data, error } = await supabase.rpc('is_user_admin', {
        user_telegram_id: telegramId
      });

      if (error) {
        console.error('‚ùå Supabase error in isUserAdmin:', error);
        throw error;
      }

      console.log(`‚úÖ Admin check result for user ${telegramId}: ${data}`);
      return { data: data || false, error: null };
    } catch (error) {
      console.error('‚ùå Error checking admin status:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async setUserAdmin(telegramId: number, isAdmin: boolean = true): Promise<ApiResponse<boolean>> {
    try {
      console.log(`üîß AdminService.setUserAdmin setting admin status for user ${telegramId} to: ${isAdmin}`);
      
      const { data, error } = await supabase.rpc('set_user_admin', {
        user_telegram_id: telegramId,
        admin_status: isAdmin
      });

      if (error) {
        console.error('‚ùå Supabase error in setUserAdmin:', error);
        throw error;
      }

      console.log(`‚úÖ Admin status updated for user ${telegramId}: ${data}`);
      return { data: data || false, error: null };
    } catch (error) {
      console.error('‚ùå Error setting admin status:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
   */
  static async getAllAdmins(): Promise<ApiResponse<DatabaseUser[]>> {
    try {
      console.log('üîç AdminService.getAllAdmins fetching all admin users');
      
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('is_admin', true)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Supabase error in getAllAdmins:', error);
        throw error;
      }

      console.log(`‚úÖ Found ${data?.length || 0} admin users`);
      return { data: data || [], error: null };
    } catch (error) {
      console.error('‚ùå Error fetching admin users:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  static async getAdminStats(): Promise<ApiResponse<{
    totalUsers: number;
    totalEvents: number;
    totalActiveEvents: number;
    totalPrivateEvents: number;
    totalResponses: number;
    totalAdmins: number;
  }>> {
    try {
      console.log('üìä AdminService.getAdminStats fetching admin statistics');
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const [usersCount, eventsCount, activeEventsCount, privateEventsCount, responsesCount, adminsCount] = await Promise.all([
        supabase.from('users').select('*', { count: 'exact', head: true }),
        supabase.from('events').select('*', { count: 'exact', head: true }),
        supabase.from('events').select('*', { count: 'exact', head: true }).eq('status', 'active'),
        supabase.from('events').select('*', { count: 'exact', head: true }).eq('is_private', true),
        supabase.from('event_responses').select('*', { count: 'exact', head: true }),
        supabase.from('users').select('*', { count: 'exact', head: true }).eq('is_admin', true)
      ]);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
      if (usersCount.error) throw usersCount.error;
      if (eventsCount.error) throw eventsCount.error;
      if (activeEventsCount.error) throw activeEventsCount.error;
      if (privateEventsCount.error) throw privateEventsCount.error;
      if (responsesCount.error) throw responsesCount.error;
      if (adminsCount.error) throw adminsCount.error;

      const stats = {
        totalUsers: usersCount.count || 0,
        totalEvents: eventsCount.count || 0,
        totalActiveEvents: activeEventsCount.count || 0,
        totalPrivateEvents: privateEventsCount.count || 0,
        totalResponses: responsesCount.count || 0,
        totalAdmins: adminsCount.count || 0
      };

      console.log('‚úÖ Admin stats fetched successfully:', stats);
      return { data: stats, error: null };
    } catch (error) {
      console.error('‚ùå Error fetching admin stats:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  private static getErrorMessage(error: any): string {
    if (typeof error === 'string') {
      return error;
    }
    
    if (error && typeof error === 'object') {
      if ('message' in error && typeof error.message === 'string') {
        return error.message;
      } else if ('error' in error && typeof error.error === 'string') {
        return error.error;
      } else if ('details' in error && typeof error.details === 'string') {
        return error.details;
      }
    }
    
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const adminService = AdminService; 