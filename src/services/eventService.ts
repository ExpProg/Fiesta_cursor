import { supabase } from '@/hooks/useSupabase';
import { generateRandomGradient } from '@/utils/gradients';
import { InvitationService } from './invitationService';
import type { 
  DatabaseEvent, 
  DatabaseEventInsert, 
  DatabaseEventUpdate,
  ApiResponse,
  Event,
  CreateEventData 
} from '@/types/database';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
 */
export class EventService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID
   */
  static async getById(id: string): Promise<ApiResponse<DatabaseEvent>> {
    try {
      console.log(`üîç EventService.getById searching for ID: ${id}`);
      
      const { data, error } = await supabase
        .from('events')
        .select('*')
        .eq('id', id)
        .single();

      if (error && error.code !== 'PGRST116') {
        console.error('‚ùå Supabase error in getById:', error);
        throw error;
      }

      if (error && error.code === 'PGRST116') {
        console.log(`‚ÑπÔ∏è No event found with id: ${id}`);
        return { data: null, error: null };
      }

      console.log(`‚úÖ Found event with id: ${id}`);
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Error fetching event by ID:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  static async create(eventData: CreateEventData, createdBy: number): Promise<ApiResponse<DatabaseEvent>> {
    try {
      console.log('üìù EventService.create attempting to create event:', eventData);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—è event_time
      const eventDate = new Date(eventData.date);
      const hours = eventDate.getHours().toString().padStart(2, '0');
      const minutes = eventDate.getMinutes().toString().padStart(2, '0');
      const seconds = eventDate.getSeconds().toString().padStart(2, '0');
      const eventTime = `${hours}:${minutes}:${seconds}`; // —Ñ–æ—Ä–º–∞—Ç HH:MM:SS –¥–ª—è TIME –ø–æ–ª—è
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
      let endDate = null;
      let endTime = null;
      
      if (eventData.end_date) {
        endDate = eventData.end_date;
      }
      
      if (eventData.end_time) {
        endTime = `${eventData.end_time}:00`; // –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ HH:MM:SS
      }
      
      const newEvent: DatabaseEventInsert = {
        title: eventData.title,
        description: eventData.description || null,
        image_url: eventData.image_url || null,
        gradient_background: eventData.image_url ? null : generateRandomGradient(),
        date: eventData.date,
        event_time: eventTime, // –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ –¥–∞—Ç—ã
        end_date: endDate,
        end_time: endTime,
        location: eventData.location || null, // –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º null –≤–º–µ—Å—Ç–æ undefined
        map_url: eventData.map_url || null, // –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
        max_participants: eventData.max_participants || null,
        created_by: createdBy,
        host_id: eventData.host_id || null,
        status: 'active',
        is_private: eventData.is_private || false
      };

      console.log('üìù Event data prepared with times:', { eventTime, endDate, endTime, newEvent });

      const { data, error } = await supabase
        .from('events')
        .insert(newEvent)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Supabase error in create:', error);
        throw error;
      }

      // –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      if (eventData.is_private && eventData.invited_users && eventData.invited_users.length > 0) {
        console.log('üìß Creating invitations for private event:', eventData.invited_users.length);
        
        const invitationResult = await InvitationService.createInvitations(
          data.id,
          createdBy,
          eventData.invited_users
        );

        if (invitationResult.error) {
          console.warn('‚ö†Ô∏è Error creating invitations:', invitationResult.error);
          // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        }
      }

      console.log('‚úÖ Event created successfully:', data?.id);
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Error creating event:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  static async update(id: string, updates: DatabaseEventUpdate): Promise<ApiResponse<DatabaseEvent>> {
    try {
      console.log('üîÑ EventService.update updating event:', { id, updates });
      
      const { data, error } = await supabase
        .from('events')
        .update(updates)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Supabase error in update:', error);
        throw error;
      }

      if (!data) {
        console.error('‚ùå No data returned from update');
        throw new Error('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      }

      console.log('‚úÖ Event updated successfully:', data.id);
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå Error updating event:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  static async delete(id: string): Promise<ApiResponse<null>> {
    try {
      console.log('üóëÔ∏è EventService.delete deleting event:', id);
      
      const { error } = await supabase
        .from('events')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('‚ùå Supabase error in delete:', error);
        throw error;
      }

      console.log('‚úÖ Event deleted successfully');
      return { data: null, error: null };
    } catch (error) {
      console.error('‚ùå Error deleting event:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  static async getUpcoming(limit: number = 10): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.getUpcoming fetching upcoming events');
      
      const { data, error } = await supabase
        .from('events')
        .select('*')
        .eq('status', 'active')
        .gte('date', new Date().toISOString())
        .order('date', { ascending: true })
        .limit(limit);

      if (error) {
        console.error('‚ùå Supabase error in getUpcoming:', error);
        throw error;
      }

      console.log(`‚úÖ Found ${data?.length || 0} upcoming events`);
      return { data: data || [], error: null };
    } catch (error) {
      console.error('‚ùå Error fetching upcoming events:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  static async getPopular(limit: number = 10): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.getPopular fetching popular events');
      
      const { data, error } = await supabase
        .from('events')
        .select('*')
        .eq('status', 'active')
        .gte('date', new Date().toISOString())
        .order('current_participants', { ascending: false })
        .order('date', { ascending: true })
        .limit(limit);

      if (error) {
        console.error('‚ùå Supabase error in getPopular:', error);
        throw error;
      }

      console.log(`‚úÖ Found ${data?.length || 0} popular events`);
      return { data: data || [], error: null };
    } catch (error) {
      console.error('‚ùå Error fetching popular events:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
   */
  static async search(query: string, limit: number = 20): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.search searching for:', query);
      
      const { data, error } = await supabase
        .from('events')
        .select('*')
        .eq('status', 'active')
        .gte('date', new Date().toISOString())
        .or(`title.ilike.%${query}%,description.ilike.%${query}%,location.ilike.%${query}%`)
        .order('date', { ascending: true })
        .limit(limit);

      if (error) {
        console.error('‚ùå Supabase error in search:', error);
        throw error;
      }

      console.log(`‚úÖ Found ${data?.length || 0} events matching query: ${query}`);
      return { data: data || [], error: null };
    } catch (error) {
      console.error('‚ùå Error searching events:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  static async getByCreator(telegramId: number, limit: number = 20): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.getByCreator fetching events for user:', telegramId);
      
      const { data, error } = await supabase
        .from('events')
        .select('*')
        .eq('created_by', telegramId)
        .order('created_at', { ascending: false })
        .limit(limit);

      if (error) {
        console.error('‚ùå Supabase error in getByCreator:', error);
        throw error;
      }

      console.log(`‚úÖ Found ${data?.length || 0} events created by user: ${telegramId}`);
      return { data: data || [], error: null };
    } catch (error) {
      console.error('‚ùå Error fetching user events:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  static validateEventData(eventData: CreateEventData): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!eventData.title || eventData.title.trim().length < 3) {
      errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
    }

    if (eventData.title && eventData.title.length > 255) {
      errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    if (eventData.description && eventData.description.length > 2000) {
      errors.push('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    if (!eventData.date) {
      errors.push('–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    } else {
      const eventDate = new Date(eventData.date);
      const now = new Date();
      if (eventDate <= now) {
        errors.push('–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
      }
    }

    if (eventData.max_participants !== undefined && eventData.max_participants < 1) {
      errors.push('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if (eventData.end_date) {
      const startDate = new Date(eventData.date);
      const endDate = new Date(eventData.end_date);
      
      if (endDate < startDate) {
        errors.push('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞');
      }
    }

    if (eventData.end_time && !eventData.end_date) {
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–µ–∑ –¥–∞—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–æ –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
      const startDateTime = new Date(eventData.date);
      const startTime = startDateTime.getHours() * 60 + startDateTime.getMinutes();
      
      const [endHours, endMinutes] = eventData.end_time.split(':').map(Number);
      const endTime = endHours * 60 + endMinutes;
      
      if (endTime <= startTime) {
        errors.push('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞');
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    if (eventData.is_private && eventData.invited_users && eventData.invited_users.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
      eventData.invited_users.forEach((user, index) => {
        if (!user.telegram_id || user.telegram_id <= 0) {
          errors.push(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${index + 1}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID`);
        }
        if (!user.first_name || user.first_name.trim().length === 0) {
          errors.push(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${index + 1}: –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ`);
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è Telegram ID
      const telegramIds = eventData.invited_users.map(user => user.telegram_id);
      const uniqueIds = new Set(telegramIds);
      if (telegramIds.length !== uniqueIds.size) {
        errors.push('–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è Telegram ID –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö');
      }
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å DatabaseEvent –≤ Event (—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞—Ç)
   */
  static convertToEvent(dbEvent: DatabaseEvent): Event {
    return {
      ...dbEvent,
      created_at: new Date(dbEvent.created_at),
      updated_at: new Date(dbEvent.updated_at),
      date: new Date(dbEvent.date),
    };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ DatabaseEvent –≤ Event[]
   */
  static convertToEvents(dbEvents: DatabaseEvent[]): Event[] {
    return dbEvents.map(this.convertToEvent);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  private static getErrorMessage(error: any): string {
    if (typeof error === 'string') {
      return error;
    }
    
    if (error && typeof error === 'object') {
      if ('message' in error && typeof error.message === 'string') {
        return error.message;
      } else if ('error' in error && typeof error.error === 'string') {
        return error.error;
      } else if ('details' in error && typeof error.details === 'string') {
        return error.details;
      }
    }
    
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  static async getAll(limit: number = 20): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.getAll fetching all events');
      
      const { data, error } = await supabase
        .from('events')
        .select('*')
        .order('date', { ascending: true })
        .limit(limit);

      if (error) {
        console.error('‚ùå Supabase error in getAll:', error);
        throw error;
      }

      console.log(`‚úÖ Found ${data?.length || 0} total events`);
      return { data: data || [], error: null };
    } catch (error) {
      console.error('‚ùå Error fetching all events:', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∞–∫—Ç–∏–≤–Ω—ã–µ, –≤ –±—É–¥—É—â–µ–º, –µ—Å—Ç—å –º–µ—Å—Ç–∞)
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
   */
  static async getAvailable(limit: number = 20): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.getAvailable fetching available events');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é RPC —Ñ—É–Ω–∫—Ü–∏—é
      const { data, error } = await supabase.rpc('get_available_events_optimized', {
        events_limit: limit
      });

      if (error) {
        console.error('‚ùå Supabase RPC error in getAvailable:', error);
        
        // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return this.getAvailableLegacy(limit);
      }

      console.log(`‚úÖ Found ${data?.length || 0} available events (optimized)`);
      return { data: data || [], error: null };
    } catch (error) {
      console.error('‚ùå Error fetching available events (optimized):', error);
      
      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
      return this.getAvailableLegacy(limit);
    }
  }

  /**
   * Legacy –º–µ—Ç–æ–¥ getAvailable (–¥–ª—è fallback)
   */
  private static async getAvailableLegacy(limit: number = 20): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.getAvailableLegacy (fallback)');
      
      const { data, error } = await supabase
        .from('events')
        .select('*')
        .eq('status', 'active')
        .gte('date', new Date().toISOString())
        .order('date', { ascending: true })
        .limit(limit);

      if (error) {
        console.error('‚ùå Supabase error in getAvailable:', error);
        throw error;
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
      const availableEvents = (data || []).filter(event => {
        if (event.max_participants === null) return true; // –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return event.current_participants < event.max_participants;
      });

      console.log(`‚úÖ Found ${availableEvents.length} available events (legacy)`);
      return { data: availableEvents, error: null };
    } catch (error) {
      console.error('‚ùå Error fetching available events (legacy):', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ + —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–º —á–∞—Å—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
   */
  static async getUserEvents(telegramId: number, limit: number = 20): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.getUserEvents fetching user events for:', telegramId);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å UNION –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const { data, error } = await supabase.rpc('get_user_events_optimized', {
        user_telegram_id: telegramId,
        events_limit: limit
      });

      if (error) {
        console.error('‚ùå Supabase RPC error in getUserEvents:', error);
        
        // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return this.getUserEventsLegacy(telegramId, limit);
      }

      console.log(`‚úÖ Found ${data?.length || 0} user events (optimized)`);
      return { data: data || [], error: null };
    } catch (error) {
      console.error('‚ùå Error fetching user events (optimized):', error);
      
      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
      return this.getUserEventsLegacy(telegramId, limit);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  static async getUserArchive(telegramId: number, limit: number = 20): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.getUserArchive fetching archive events for:', telegramId);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å UNION
      const { data, error } = await supabase.rpc('get_user_archive_optimized', {
        user_telegram_id: telegramId,
        events_limit: limit
      });

      if (error) {
        console.error('‚ùå Supabase RPC error in getUserArchive:', error);
        
        // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return this.getUserArchiveLegacy(telegramId, limit);
      }

      console.log(`‚úÖ Found ${data?.length || 0} archive events (optimized)`);
      return { data: data || [], error: null };
    } catch (error) {
      console.error('‚ùå Error fetching archive events (optimized):', error);
      
      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
      return this.getUserArchiveLegacy(telegramId, limit);
    }
  }

  /**
   * Legacy –º–µ—Ç–æ–¥ getUserEvents (–¥–ª—è fallback)
   */
  private static async getUserEventsLegacy(telegramId: number, limit: number = 20): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.getUserEventsLegacy (fallback) for:', telegramId);
      
      // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è
      const { data: responses, error: responsesError } = await supabase
        .from('event_responses')
        .select('event_id')
        .eq('user_telegram_id', telegramId)
        .eq('response_status', 'attending');

      if (responsesError) {
        console.error('‚ùå Supabase error getting user responses:', responsesError);
        throw responsesError;
      }

      const eventIds = responses?.map(r => r.event_id) || [];
      console.log('üìã User responded to events:', eventIds);

      if (eventIds.length === 0) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, 
        // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–º —á–∞—Å—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        const { data, error } = await supabase
          .from('events')
          .select('*')
          .eq('created_by', telegramId)
          .eq('is_private', true)
          .gte('date', new Date().toISOString())
          .order('date', { ascending: true })
          .limit(limit);

        if (error) {
          console.error('‚ùå Supabase error in getUserEvents (no responses):', error);
          throw error;
        }

        console.log(`‚úÖ Found ${data?.length || 0} user events (only created private)`);
        return { data: data || [], error: null };
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è
      const { data: respondedEvents, error: respondedError } = await supabase
        .from('events')
        .select('*')
        .in('id', eventIds)
        .gte('date', new Date().toISOString())
        .order('date', { ascending: true });

      if (respondedError) {
        console.error('‚ùå Supabase error getting responded events:', respondedError);
        throw respondedError;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∞—Å—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      const { data: createdPrivateEvents, error: createdError } = await supabase
        .from('events')
        .select('*')
        .eq('created_by', telegramId)
        .eq('is_private', true)
        .gte('date', new Date().toISOString())
        .order('date', { ascending: true });

      if (createdError) {
        console.error('‚ùå Supabase error getting created private events:', createdError);
        throw createdError;
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const allEvents = [...(respondedEvents || []), ...(createdPrivateEvents || [])];
      const uniqueEvents = allEvents.filter((event, index, self) => 
        index === self.findIndex(e => e.id === event.id)
      );

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const sortedEvents = uniqueEvents
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
        .slice(0, limit);

      console.log(`‚úÖ Found ${sortedEvents.length} user events (legacy: ${respondedEvents?.length || 0} responded + ${createdPrivateEvents?.length || 0} created private, ${uniqueEvents.length} unique)`);
      return { data: sortedEvents, error: null };
    } catch (error) {
      console.error('‚ùå Error fetching user events (legacy):', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${this.getErrorMessage(error)}` } 
      };
    }
  }

  /**
   * Legacy –º–µ—Ç–æ–¥ getUserArchive (–¥–ª—è fallback)
   */
  private static async getUserArchiveLegacy(telegramId: number, limit: number = 20): Promise<ApiResponse<DatabaseEvent[]>> {
    try {
      console.log('üîç EventService.getUserArchiveLegacy (fallback) for:', telegramId);
      
      // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è
      const { data: responses, error: responsesError } = await supabase
        .from('event_responses')
        .select('event_id')
        .eq('user_telegram_id', telegramId)
        .eq('response_status', 'attending');

      if (responsesError) {
        console.error('‚ùå Supabase error getting user responses:', responsesError);
        throw responsesError;
      }

      const eventIds = responses?.map(r => r.event_id) || [];
      console.log('üìã User responded to archived events:', eventIds);

      if (eventIds.length === 0) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, 
        // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–º —á–∞—Å—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        const { data, error } = await supabase
          .from('events')
          .select('*')
          .eq('created_by', telegramId)
          .eq('is_private', true)
          .lt('date', new Date().toISOString())
          .order('date', { ascending: false })
          .limit(limit);

        if (error) {
          console.error('‚ùå Supabase error in getUserArchive (no responses):', error);
          throw error;
        }

        console.log(`‚úÖ Found ${data?.length || 0} archive events (only created private)`);
        return { data: data || [], error: null };
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è
      const { data: respondedEvents, error: respondedError } = await supabase
        .from('events')
        .select('*')
        .in('id', eventIds)
        .lt('date', new Date().toISOString())
        .order('date', { ascending: false });

      if (respondedError) {
        console.error('‚ùå Supabase error getting responded archive events:', respondedError);
        throw respondedError;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∞—Å—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      const { data: createdPrivateEvents, error: createdError } = await supabase
        .from('events')
        .select('*')
        .eq('created_by', telegramId)
        .eq('is_private', true)
        .lt('date', new Date().toISOString())
        .order('date', { ascending: false });

      if (createdError) {
        console.error('‚ùå Supabase error getting created private archive events:', createdError);
        throw createdError;
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const allEvents = [...(respondedEvents || []), ...(createdPrivateEvents || [])];
      const uniqueEvents = allEvents.filter((event, index, self) => 
        index === self.findIndex(e => e.id === event.id)
      );

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ) –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const sortedEvents = uniqueEvents
        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
        .slice(0, limit);

      console.log(`‚úÖ Found ${sortedEvents.length} archive events (legacy: ${respondedEvents?.length || 0} responded + ${createdPrivateEvents?.length || 0} created private, ${uniqueEvents.length} unique)`);
      return { data: sortedEvents, error: null };
    } catch (error) {
      console.error('‚ùå Error fetching archive events (legacy):', error);
      return { 
        data: null, 
        error: { message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${this.getErrorMessage(error)}` } 
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const eventService = EventService; 